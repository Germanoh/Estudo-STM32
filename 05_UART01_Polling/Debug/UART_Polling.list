
UART_Polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080021b4  080021b4  000121b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002248  08002248  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002248  08002248  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002248  08002248  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002248  08002248  00012248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800224c  0800224c  0001224c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000070  080022c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080022c0  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000607b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013f6  00000000  00000000  00026114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  00027510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000530  00000000  00000000  00027ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ca7  00000000  00000000  00028018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000064e8  00000000  00000000  0003ecbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081fe7  00000000  00000000  000451a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c718e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a20  00000000  00000000  000c71e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800219c 	.word	0x0800219c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800219c 	.word	0x0800219c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b09e      	sub	sp, #120	; 0x78
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fa2d 	bl	80005c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f877 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f8db 	bl	8000324 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800016e:	f000 f8af 	bl	80002d0 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // limpa a tela e coloca o cursor do mouse na posição 1x1
  const uint8_t CLRSCR[] = "\033[0;0H\033[2J";
 8000172:	4a33      	ldr	r2, [pc, #204]	; (8000240 <main+0xe4>)
 8000174:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000178:	ca07      	ldmia	r2, {r0, r1, r2}
 800017a:	c303      	stmia	r3!, {r0, r1}
 800017c:	801a      	strh	r2, [r3, #0]
 800017e:	3302      	adds	r3, #2
 8000180:	0c12      	lsrs	r2, r2, #16
 8000182:	701a      	strb	r2, [r3, #0]

  // buffer para enviar dados a serial
  uint8_t DadoTX[100] = {0};
 8000184:	2300      	movs	r3, #0
 8000186:	60bb      	str	r3, [r7, #8]
 8000188:	f107 030c 	add.w	r3, r7, #12
 800018c:	2260      	movs	r2, #96	; 0x60
 800018e:	2100      	movs	r1, #0
 8000190:	4618      	mov	r0, r3
 8000192:	f001 fbc1 	bl	8001918 <memset>

  // buffer para receber dados da serial
  uint8_t DadoRX[1] = {0};	// recebe apenas o estado do LED
 8000196:	2300      	movs	r3, #0
 8000198:	713b      	strb	r3, [r7, #4]

  while (1)
  {
	  // efetua a leitura do teclado
	  HAL_UART_Receive(&huart1, DadoRX, 1, 100);
 800019a:	1d39      	adds	r1, r7, #4
 800019c:	2364      	movs	r3, #100	; 0x64
 800019e:	2201      	movs	r2, #1
 80001a0:	4828      	ldr	r0, [pc, #160]	; (8000244 <main+0xe8>)
 80001a2:	f001 fa18 	bl	80015d6 <HAL_UART_Receive>

	  // acende o LED caso o usuário envie 1 para o terminal e o LED esteja desligado
	  if (DadoRX[0] == '1' &&  !HAL_GPIO_ReadPin(LED_VERMELHO_GPIO_Port, LED_VERMELHO_Pin))
 80001a6:	793b      	ldrb	r3, [r7, #4]
 80001a8:	2b31      	cmp	r3, #49	; 0x31
 80001aa:	d10c      	bne.n	80001c6 <main+0x6a>
 80001ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001b0:	4825      	ldr	r0, [pc, #148]	; (8000248 <main+0xec>)
 80001b2:	f000 fccf 	bl	8000b54 <HAL_GPIO_ReadPin>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d104      	bne.n	80001c6 <main+0x6a>
	  {
		  HAL_GPIO_TogglePin(LED_VERMELHO_GPIO_Port, LED_VERMELHO_Pin);
 80001bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001c0:	4821      	ldr	r0, [pc, #132]	; (8000248 <main+0xec>)
 80001c2:	f000 fcf6 	bl	8000bb2 <HAL_GPIO_TogglePin>
	  }

	  // apaga o LED caso o usuário envie 0 para o terminal e o LED esteja ligado
	  if (DadoRX[0] == '0' &&  HAL_GPIO_ReadPin(LED_VERMELHO_GPIO_Port, LED_VERMELHO_Pin) == GPIO_PIN_SET)
 80001c6:	793b      	ldrb	r3, [r7, #4]
 80001c8:	2b30      	cmp	r3, #48	; 0x30
 80001ca:	d10c      	bne.n	80001e6 <main+0x8a>
 80001cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001d0:	481d      	ldr	r0, [pc, #116]	; (8000248 <main+0xec>)
 80001d2:	f000 fcbf 	bl	8000b54 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b01      	cmp	r3, #1
 80001da:	d104      	bne.n	80001e6 <main+0x8a>
	  {
		  HAL_GPIO_TogglePin(LED_VERMELHO_GPIO_Port, LED_VERMELHO_Pin);
 80001dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001e0:	4819      	ldr	r0, [pc, #100]	; (8000248 <main+0xec>)
 80001e2:	f000 fce6 	bl	8000bb2 <HAL_GPIO_TogglePin>
	  }

	  // Envia pela serial o caractere para limpar a tela do terminal
	  HAL_UART_Transmit(&huart1, (unsigned char *)CLRSCR, strlen((const char *)CLRSCR), 100);
 80001e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80001ea:	4618      	mov	r0, r3
 80001ec:	f7ff ffae 	bl	800014c <strlen>
 80001f0:	4603      	mov	r3, r0
 80001f2:	b29a      	uxth	r2, r3
 80001f4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80001f8:	2364      	movs	r3, #100	; 0x64
 80001fa:	4812      	ldr	r0, [pc, #72]	; (8000244 <main+0xe8>)
 80001fc:	f001 f959 	bl	80014b2 <HAL_UART_Transmit>

	  // Atualiza a tela do terminal com o estado do led
	  // Quando a leitura da função HAL_GPIO_ReadPin for 1, será escrito "ACESO"
	  // quando for 0, será escrito "APAGADO"
	  sprintf((char *)DadoTX, "Estado do LED:\n\rLed: %s \n",
			  (HAL_GPIO_ReadPin(LED_VERMELHO_GPIO_Port, LED_VERMELHO_Pin) ? "ACESO" : "APAGADO"));
 8000200:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000204:	4810      	ldr	r0, [pc, #64]	; (8000248 <main+0xec>)
 8000206:	f000 fca5 	bl	8000b54 <HAL_GPIO_ReadPin>
 800020a:	4603      	mov	r3, r0
	  sprintf((char *)DadoTX, "Estado do LED:\n\rLed: %s \n",
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <main+0xb8>
 8000210:	4a0e      	ldr	r2, [pc, #56]	; (800024c <main+0xf0>)
 8000212:	e000      	b.n	8000216 <main+0xba>
 8000214:	4a0e      	ldr	r2, [pc, #56]	; (8000250 <main+0xf4>)
 8000216:	f107 0308 	add.w	r3, r7, #8
 800021a:	490e      	ldr	r1, [pc, #56]	; (8000254 <main+0xf8>)
 800021c:	4618      	mov	r0, r3
 800021e:	f001 fb83 	bl	8001928 <siprintf>

	  // Envia pela serial texto atualizado
	  HAL_UART_Transmit(&huart1, DadoTX, strlen((const char *)DadoTX), 500);
 8000222:	f107 0308 	add.w	r3, r7, #8
 8000226:	4618      	mov	r0, r3
 8000228:	f7ff ff90 	bl	800014c <strlen>
 800022c:	4603      	mov	r3, r0
 800022e:	b29a      	uxth	r2, r3
 8000230:	f107 0108 	add.w	r1, r7, #8
 8000234:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <main+0xe8>)
 800023a:	f001 f93a 	bl	80014b2 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, DadoRX, 1, 100);
 800023e:	e7ac      	b.n	800019a <main+0x3e>
 8000240:	080021e0 	.word	0x080021e0
 8000244:	20000098 	.word	0x20000098
 8000248:	40010c00 	.word	0x40010c00
 800024c:	080021b4 	.word	0x080021b4
 8000250:	080021bc 	.word	0x080021bc
 8000254:	080021c4 	.word	0x080021c4

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b090      	sub	sp, #64	; 0x40
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	2228      	movs	r2, #40	; 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f001 fb56 	bl	8001918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027a:	2302      	movs	r3, #2
 800027c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027e:	2301      	movs	r3, #1
 8000280:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000282:	2310      	movs	r3, #16
 8000284:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000286:	2300      	movs	r3, #0
 8000288:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	4618      	mov	r0, r3
 8000290:	f000 fca8 	bl	8000be4 <HAL_RCC_OscConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800029a:	f000 f883 	bl	80003a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	230f      	movs	r3, #15
 80002a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a2:	2300      	movs	r3, #0
 80002a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 ff14 	bl	80010e4 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002c2:	f000 f86f 	bl	80003a4 <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3740      	adds	r7, #64	; 0x40
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002d6:	4a12      	ldr	r2, [pc, #72]	; (8000320 <MX_USART1_UART_Init+0x50>)
 80002d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80002da:	4b10      	ldr	r3, [pc, #64]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002f6:	220c      	movs	r2, #12
 80002f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002fa:	4b08      	ldr	r3, [pc, #32]	; (800031c <MX_USART1_UART_Init+0x4c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <MX_USART1_UART_Init+0x4c>)
 8000302:	2200      	movs	r2, #0
 8000304:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000306:	4805      	ldr	r0, [pc, #20]	; (800031c <MX_USART1_UART_Init+0x4c>)
 8000308:	f001 f886 	bl	8001418 <HAL_UART_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000312:	f000 f847 	bl	80003a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000098 	.word	0x20000098
 8000320:	40013800 	.word	0x40013800

08000324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032a:	f107 0308 	add.w	r3, r7, #8
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000338:	4b18      	ldr	r3, [pc, #96]	; (800039c <MX_GPIO_Init+0x78>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4a17      	ldr	r2, [pc, #92]	; (800039c <MX_GPIO_Init+0x78>)
 800033e:	f043 0308 	orr.w	r3, r3, #8
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	4b15      	ldr	r3, [pc, #84]	; (800039c <MX_GPIO_Init+0x78>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f003 0308 	and.w	r3, r3, #8
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000350:	4b12      	ldr	r3, [pc, #72]	; (800039c <MX_GPIO_Init+0x78>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a11      	ldr	r2, [pc, #68]	; (800039c <MX_GPIO_Init+0x78>)
 8000356:	f043 0304 	orr.w	r3, r3, #4
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_GPIO_Init+0x78>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0304 	and.w	r3, r3, #4
 8000364:	603b      	str	r3, [r7, #0]
 8000366:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_VERMELHO_GPIO_Port, LED_VERMELHO_Pin, GPIO_PIN_RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800036e:	480c      	ldr	r0, [pc, #48]	; (80003a0 <MX_GPIO_Init+0x7c>)
 8000370:	f000 fc07 	bl	8000b82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_VERMELHO_Pin */
  GPIO_InitStruct.Pin = LED_VERMELHO_Pin;
 8000374:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000378:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037a:	2301      	movs	r3, #1
 800037c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	2300      	movs	r3, #0
 8000380:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000382:	2302      	movs	r3, #2
 8000384:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_VERMELHO_GPIO_Port, &GPIO_InitStruct);
 8000386:	f107 0308 	add.w	r3, r7, #8
 800038a:	4619      	mov	r1, r3
 800038c:	4804      	ldr	r0, [pc, #16]	; (80003a0 <MX_GPIO_Init+0x7c>)
 800038e:	f000 fa5d 	bl	800084c <HAL_GPIO_Init>

}
 8000392:	bf00      	nop
 8000394:	3718      	adds	r7, #24
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40021000 	.word	0x40021000
 80003a0:	40010c00 	.word	0x40010c00

080003a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a8:	b672      	cpsid	i
}
 80003aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ac:	e7fe      	b.n	80003ac <Error_Handler+0x8>
	...

080003b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003b6:	4b15      	ldr	r3, [pc, #84]	; (800040c <HAL_MspInit+0x5c>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4a14      	ldr	r2, [pc, #80]	; (800040c <HAL_MspInit+0x5c>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6193      	str	r3, [r2, #24]
 80003c2:	4b12      	ldr	r3, [pc, #72]	; (800040c <HAL_MspInit+0x5c>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	60bb      	str	r3, [r7, #8]
 80003cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ce:	4b0f      	ldr	r3, [pc, #60]	; (800040c <HAL_MspInit+0x5c>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	4a0e      	ldr	r2, [pc, #56]	; (800040c <HAL_MspInit+0x5c>)
 80003d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d8:	61d3      	str	r3, [r2, #28]
 80003da:	4b0c      	ldr	r3, [pc, #48]	; (800040c <HAL_MspInit+0x5c>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <HAL_MspInit+0x60>)
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	4a04      	ldr	r2, [pc, #16]	; (8000410 <HAL_MspInit+0x60>)
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000402:	bf00      	nop
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000
 8000410:	40010000 	.word	0x40010000

08000414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b088      	sub	sp, #32
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041c:	f107 0310 	add.w	r3, r7, #16
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
 8000428:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a1c      	ldr	r2, [pc, #112]	; (80004a0 <HAL_UART_MspInit+0x8c>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d131      	bne.n	8000498 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000434:	4b1b      	ldr	r3, [pc, #108]	; (80004a4 <HAL_UART_MspInit+0x90>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a1a      	ldr	r2, [pc, #104]	; (80004a4 <HAL_UART_MspInit+0x90>)
 800043a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b18      	ldr	r3, [pc, #96]	; (80004a4 <HAL_UART_MspInit+0x90>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800044c:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <HAL_UART_MspInit+0x90>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a14      	ldr	r2, [pc, #80]	; (80004a4 <HAL_UART_MspInit+0x90>)
 8000452:	f043 0304 	orr.w	r3, r3, #4
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <HAL_UART_MspInit+0x90>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0304 	and.w	r3, r3, #4
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000468:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800046a:	2302      	movs	r3, #2
 800046c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800046e:	2303      	movs	r3, #3
 8000470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000472:	f107 0310 	add.w	r3, r7, #16
 8000476:	4619      	mov	r1, r3
 8000478:	480b      	ldr	r0, [pc, #44]	; (80004a8 <HAL_UART_MspInit+0x94>)
 800047a:	f000 f9e7 	bl	800084c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800047e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000482:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	4619      	mov	r1, r3
 8000492:	4805      	ldr	r0, [pc, #20]	; (80004a8 <HAL_UART_MspInit+0x94>)
 8000494:	f000 f9da 	bl	800084c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000498:	bf00      	nop
 800049a:	3720      	adds	r7, #32
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40013800 	.word	0x40013800
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010800 	.word	0x40010800

080004ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <NMI_Handler+0x4>

080004b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b6:	e7fe      	b.n	80004b6 <HardFault_Handler+0x4>

080004b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004bc:	e7fe      	b.n	80004bc <MemManage_Handler+0x4>

080004be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c2:	e7fe      	b.n	80004c2 <BusFault_Handler+0x4>

080004c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <UsageFault_Handler+0x4>

080004ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ce:	bf00      	nop
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr

080004d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr

080004e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr

080004ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f2:	f000 f8ab 	bl	800064c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
	...

080004fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000504:	4a14      	ldr	r2, [pc, #80]	; (8000558 <_sbrk+0x5c>)
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <_sbrk+0x60>)
 8000508:	1ad3      	subs	r3, r2, r3
 800050a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000510:	4b13      	ldr	r3, [pc, #76]	; (8000560 <_sbrk+0x64>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d102      	bne.n	800051e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <_sbrk+0x64>)
 800051a:	4a12      	ldr	r2, [pc, #72]	; (8000564 <_sbrk+0x68>)
 800051c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800051e:	4b10      	ldr	r3, [pc, #64]	; (8000560 <_sbrk+0x64>)
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4413      	add	r3, r2
 8000526:	693a      	ldr	r2, [r7, #16]
 8000528:	429a      	cmp	r2, r3
 800052a:	d207      	bcs.n	800053c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800052c:	f001 f9ca 	bl	80018c4 <__errno>
 8000530:	4603      	mov	r3, r0
 8000532:	220c      	movs	r2, #12
 8000534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000536:	f04f 33ff 	mov.w	r3, #4294967295
 800053a:	e009      	b.n	8000550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800053c:	4b08      	ldr	r3, [pc, #32]	; (8000560 <_sbrk+0x64>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000542:	4b07      	ldr	r3, [pc, #28]	; (8000560 <_sbrk+0x64>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4413      	add	r3, r2
 800054a:	4a05      	ldr	r2, [pc, #20]	; (8000560 <_sbrk+0x64>)
 800054c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800054e:	68fb      	ldr	r3, [r7, #12]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3718      	adds	r7, #24
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20005000 	.word	0x20005000
 800055c:	00000400 	.word	0x00000400
 8000560:	2000008c 	.word	0x2000008c
 8000564:	200000f0 	.word	0x200000f0

08000568 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr

08000574 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000574:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000576:	e003      	b.n	8000580 <LoopCopyDataInit>

08000578 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800057a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800057c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800057e:	3104      	adds	r1, #4

08000580 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000580:	480a      	ldr	r0, [pc, #40]	; (80005ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000584:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000586:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000588:	d3f6      	bcc.n	8000578 <CopyDataInit>
  ldr r2, =_sbss
 800058a:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800058c:	e002      	b.n	8000594 <LoopFillZerobss>

0800058e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000590:	f842 3b04 	str.w	r3, [r2], #4

08000594 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000596:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000598:	d3f9      	bcc.n	800058e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800059a:	f7ff ffe5 	bl	8000568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800059e:	f001 f997 	bl	80018d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005a2:	f7ff fddb 	bl	800015c <main>
  bx lr
 80005a6:	4770      	bx	lr
  ldr r3, =_sidata
 80005a8:	08002250 	.word	0x08002250
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005b0:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80005b4:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80005b8:	200000ec 	.word	0x200000ec

080005bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005bc:	e7fe      	b.n	80005bc <ADC1_2_IRQHandler>
	...

080005c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <HAL_Init+0x28>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <HAL_Init+0x28>)
 80005ca:	f043 0310 	orr.w	r3, r3, #16
 80005ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d0:	2003      	movs	r0, #3
 80005d2:	f000 f907 	bl	80007e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f000 f808 	bl	80005ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005dc:	f7ff fee8 	bl	80003b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e0:	2300      	movs	r3, #0
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40022000 	.word	0x40022000

080005ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_InitTick+0x54>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_InitTick+0x58>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4619      	mov	r1, r3
 80005fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000602:	fbb3 f3f1 	udiv	r3, r3, r1
 8000606:	fbb2 f3f3 	udiv	r3, r2, r3
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f911 	bl	8000832 <HAL_SYSTICK_Config>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000616:	2301      	movs	r3, #1
 8000618:	e00e      	b.n	8000638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2b0f      	cmp	r3, #15
 800061e:	d80a      	bhi.n	8000636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000620:	2200      	movs	r2, #0
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	f04f 30ff 	mov.w	r0, #4294967295
 8000628:	f000 f8e7 	bl	80007fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800062c:	4a06      	ldr	r2, [pc, #24]	; (8000648 <HAL_InitTick+0x5c>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000632:	2300      	movs	r3, #0
 8000634:	e000      	b.n	8000638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000636:	2301      	movs	r3, #1
}
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000000 	.word	0x20000000
 8000644:	20000008 	.word	0x20000008
 8000648:	20000004 	.word	0x20000004

0800064c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <HAL_IncTick+0x1c>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <HAL_IncTick+0x20>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4413      	add	r3, r2
 800065c:	4a03      	ldr	r2, [pc, #12]	; (800066c <HAL_IncTick+0x20>)
 800065e:	6013      	str	r3, [r2, #0]
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	20000008 	.word	0x20000008
 800066c:	200000d8 	.word	0x200000d8

08000670 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  return uwTick;
 8000674:	4b02      	ldr	r3, [pc, #8]	; (8000680 <HAL_GetTick+0x10>)
 8000676:	681b      	ldr	r3, [r3, #0]
}
 8000678:	4618      	mov	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	200000d8 	.word	0x200000d8

08000684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006a0:	4013      	ands	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006b6:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <__NVIC_SetPriorityGrouping+0x44>)
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	60d3      	str	r3, [r2, #12]
}
 80006bc:	bf00      	nop
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <__NVIC_GetPriorityGrouping+0x18>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	0a1b      	lsrs	r3, r3, #8
 80006d6:	f003 0307 	and.w	r3, r3, #7
}
 80006da:	4618      	mov	r0, r3
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	db0a      	blt.n	8000712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	490c      	ldr	r1, [pc, #48]	; (8000734 <__NVIC_SetPriority+0x4c>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	0112      	lsls	r2, r2, #4
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	440b      	add	r3, r1
 800070c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000710:	e00a      	b.n	8000728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4908      	ldr	r1, [pc, #32]	; (8000738 <__NVIC_SetPriority+0x50>)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	3b04      	subs	r3, #4
 8000720:	0112      	lsls	r2, r2, #4
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	440b      	add	r3, r1
 8000726:	761a      	strb	r2, [r3, #24]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e100 	.word	0xe000e100
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	; 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	2b04      	cmp	r3, #4
 8000758:	bf28      	it	cs
 800075a:	2304      	movcs	r3, #4
 800075c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3304      	adds	r3, #4
 8000762:	2b06      	cmp	r3, #6
 8000764:	d902      	bls.n	800076c <NVIC_EncodePriority+0x30>
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3b03      	subs	r3, #3
 800076a:	e000      	b.n	800076e <NVIC_EncodePriority+0x32>
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	f04f 32ff 	mov.w	r2, #4294967295
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	43da      	mvns	r2, r3
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	401a      	ands	r2, r3
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000784:	f04f 31ff 	mov.w	r1, #4294967295
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	43d9      	mvns	r1, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	4313      	orrs	r3, r2
         );
}
 8000796:	4618      	mov	r0, r3
 8000798:	3724      	adds	r7, #36	; 0x24
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007b0:	d301      	bcc.n	80007b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b2:	2301      	movs	r3, #1
 80007b4:	e00f      	b.n	80007d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <SysTick_Config+0x40>)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007be:	210f      	movs	r1, #15
 80007c0:	f04f 30ff 	mov.w	r0, #4294967295
 80007c4:	f7ff ff90 	bl	80006e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <SysTick_Config+0x40>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ce:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <SysTick_Config+0x40>)
 80007d0:	2207      	movs	r2, #7
 80007d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	e000e010 	.word	0xe000e010

080007e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff ff49 	bl	8000684 <__NVIC_SetPriorityGrouping>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b086      	sub	sp, #24
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]
 8000806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800080c:	f7ff ff5e 	bl	80006cc <__NVIC_GetPriorityGrouping>
 8000810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	68b9      	ldr	r1, [r7, #8]
 8000816:	6978      	ldr	r0, [r7, #20]
 8000818:	f7ff ff90 	bl	800073c <NVIC_EncodePriority>
 800081c:	4602      	mov	r2, r0
 800081e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000822:	4611      	mov	r1, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff5f 	bl	80006e8 <__NVIC_SetPriority>
}
 800082a:	bf00      	nop
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff ffb0 	bl	80007a0 <SysTick_Config>
 8000840:	4603      	mov	r3, r0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800084c:	b480      	push	{r7}
 800084e:	b08b      	sub	sp, #44	; 0x2c
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800085e:	e169      	b.n	8000b34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000860:	2201      	movs	r2, #1
 8000862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	69fa      	ldr	r2, [r7, #28]
 8000870:	4013      	ands	r3, r2
 8000872:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000874:	69ba      	ldr	r2, [r7, #24]
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	429a      	cmp	r2, r3
 800087a:	f040 8158 	bne.w	8000b2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	4a9a      	ldr	r2, [pc, #616]	; (8000aec <HAL_GPIO_Init+0x2a0>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d05e      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
 8000888:	4a98      	ldr	r2, [pc, #608]	; (8000aec <HAL_GPIO_Init+0x2a0>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d875      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 800088e:	4a98      	ldr	r2, [pc, #608]	; (8000af0 <HAL_GPIO_Init+0x2a4>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d058      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
 8000894:	4a96      	ldr	r2, [pc, #600]	; (8000af0 <HAL_GPIO_Init+0x2a4>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d86f      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 800089a:	4a96      	ldr	r2, [pc, #600]	; (8000af4 <HAL_GPIO_Init+0x2a8>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d052      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
 80008a0:	4a94      	ldr	r2, [pc, #592]	; (8000af4 <HAL_GPIO_Init+0x2a8>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d869      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 80008a6:	4a94      	ldr	r2, [pc, #592]	; (8000af8 <HAL_GPIO_Init+0x2ac>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d04c      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
 80008ac:	4a92      	ldr	r2, [pc, #584]	; (8000af8 <HAL_GPIO_Init+0x2ac>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d863      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 80008b2:	4a92      	ldr	r2, [pc, #584]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d046      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
 80008b8:	4a90      	ldr	r2, [pc, #576]	; (8000afc <HAL_GPIO_Init+0x2b0>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d85d      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 80008be:	2b12      	cmp	r3, #18
 80008c0:	d82a      	bhi.n	8000918 <HAL_GPIO_Init+0xcc>
 80008c2:	2b12      	cmp	r3, #18
 80008c4:	d859      	bhi.n	800097a <HAL_GPIO_Init+0x12e>
 80008c6:	a201      	add	r2, pc, #4	; (adr r2, 80008cc <HAL_GPIO_Init+0x80>)
 80008c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008cc:	08000947 	.word	0x08000947
 80008d0:	08000921 	.word	0x08000921
 80008d4:	08000933 	.word	0x08000933
 80008d8:	08000975 	.word	0x08000975
 80008dc:	0800097b 	.word	0x0800097b
 80008e0:	0800097b 	.word	0x0800097b
 80008e4:	0800097b 	.word	0x0800097b
 80008e8:	0800097b 	.word	0x0800097b
 80008ec:	0800097b 	.word	0x0800097b
 80008f0:	0800097b 	.word	0x0800097b
 80008f4:	0800097b 	.word	0x0800097b
 80008f8:	0800097b 	.word	0x0800097b
 80008fc:	0800097b 	.word	0x0800097b
 8000900:	0800097b 	.word	0x0800097b
 8000904:	0800097b 	.word	0x0800097b
 8000908:	0800097b 	.word	0x0800097b
 800090c:	0800097b 	.word	0x0800097b
 8000910:	08000929 	.word	0x08000929
 8000914:	0800093d 	.word	0x0800093d
 8000918:	4a79      	ldr	r2, [pc, #484]	; (8000b00 <HAL_GPIO_Init+0x2b4>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d013      	beq.n	8000946 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800091e:	e02c      	b.n	800097a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	623b      	str	r3, [r7, #32]
          break;
 8000926:	e029      	b.n	800097c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	3304      	adds	r3, #4
 800092e:	623b      	str	r3, [r7, #32]
          break;
 8000930:	e024      	b.n	800097c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	3308      	adds	r3, #8
 8000938:	623b      	str	r3, [r7, #32]
          break;
 800093a:	e01f      	b.n	800097c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	330c      	adds	r3, #12
 8000942:	623b      	str	r3, [r7, #32]
          break;
 8000944:	e01a      	b.n	800097c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d102      	bne.n	8000954 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800094e:	2304      	movs	r3, #4
 8000950:	623b      	str	r3, [r7, #32]
          break;
 8000952:	e013      	b.n	800097c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d105      	bne.n	8000968 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800095c:	2308      	movs	r3, #8
 800095e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	69fa      	ldr	r2, [r7, #28]
 8000964:	611a      	str	r2, [r3, #16]
          break;
 8000966:	e009      	b.n	800097c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000968:	2308      	movs	r3, #8
 800096a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	69fa      	ldr	r2, [r7, #28]
 8000970:	615a      	str	r2, [r3, #20]
          break;
 8000972:	e003      	b.n	800097c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
          break;
 8000978:	e000      	b.n	800097c <HAL_GPIO_Init+0x130>
          break;
 800097a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	2bff      	cmp	r3, #255	; 0xff
 8000980:	d801      	bhi.n	8000986 <HAL_GPIO_Init+0x13a>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	e001      	b.n	800098a <HAL_GPIO_Init+0x13e>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	3304      	adds	r3, #4
 800098a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	2bff      	cmp	r3, #255	; 0xff
 8000990:	d802      	bhi.n	8000998 <HAL_GPIO_Init+0x14c>
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	e002      	b.n	800099e <HAL_GPIO_Init+0x152>
 8000998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099a:	3b08      	subs	r3, #8
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	210f      	movs	r1, #15
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ac:	43db      	mvns	r3, r3
 80009ae:	401a      	ands	r2, r3
 80009b0:	6a39      	ldr	r1, [r7, #32]
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	fa01 f303 	lsl.w	r3, r1, r3
 80009b8:	431a      	orrs	r2, r3
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	f000 80b1 	beq.w	8000b2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009cc:	4b4d      	ldr	r3, [pc, #308]	; (8000b04 <HAL_GPIO_Init+0x2b8>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a4c      	ldr	r2, [pc, #304]	; (8000b04 <HAL_GPIO_Init+0x2b8>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b4a      	ldr	r3, [pc, #296]	; (8000b04 <HAL_GPIO_Init+0x2b8>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009e4:	4a48      	ldr	r2, [pc, #288]	; (8000b08 <HAL_GPIO_Init+0x2bc>)
 80009e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e8:	089b      	lsrs	r3, r3, #2
 80009ea:	3302      	adds	r3, #2
 80009ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	f003 0303 	and.w	r3, r3, #3
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	220f      	movs	r2, #15
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	4013      	ands	r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a40      	ldr	r2, [pc, #256]	; (8000b0c <HAL_GPIO_Init+0x2c0>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d013      	beq.n	8000a38 <HAL_GPIO_Init+0x1ec>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a3f      	ldr	r2, [pc, #252]	; (8000b10 <HAL_GPIO_Init+0x2c4>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d00d      	beq.n	8000a34 <HAL_GPIO_Init+0x1e8>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a3e      	ldr	r2, [pc, #248]	; (8000b14 <HAL_GPIO_Init+0x2c8>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d007      	beq.n	8000a30 <HAL_GPIO_Init+0x1e4>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a3d      	ldr	r2, [pc, #244]	; (8000b18 <HAL_GPIO_Init+0x2cc>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d101      	bne.n	8000a2c <HAL_GPIO_Init+0x1e0>
 8000a28:	2303      	movs	r3, #3
 8000a2a:	e006      	b.n	8000a3a <HAL_GPIO_Init+0x1ee>
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	e004      	b.n	8000a3a <HAL_GPIO_Init+0x1ee>
 8000a30:	2302      	movs	r3, #2
 8000a32:	e002      	b.n	8000a3a <HAL_GPIO_Init+0x1ee>
 8000a34:	2301      	movs	r3, #1
 8000a36:	e000      	b.n	8000a3a <HAL_GPIO_Init+0x1ee>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a3c:	f002 0203 	and.w	r2, r2, #3
 8000a40:	0092      	lsls	r2, r2, #2
 8000a42:	4093      	lsls	r3, r2
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a4a:	492f      	ldr	r1, [pc, #188]	; (8000b08 <HAL_GPIO_Init+0x2bc>)
 8000a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4e:	089b      	lsrs	r3, r3, #2
 8000a50:	3302      	adds	r3, #2
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d006      	beq.n	8000a72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a64:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	492c      	ldr	r1, [pc, #176]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	600b      	str	r3, [r1, #0]
 8000a70:	e006      	b.n	8000a80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a72:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	4928      	ldr	r1, [pc, #160]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d006      	beq.n	8000a9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	4922      	ldr	r1, [pc, #136]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	604b      	str	r3, [r1, #4]
 8000a98:	e006      	b.n	8000aa8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a9a:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000a9c:	685a      	ldr	r2, [r3, #4]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	491e      	ldr	r1, [pc, #120]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d006      	beq.n	8000ac2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ab4:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000ab6:	689a      	ldr	r2, [r3, #8]
 8000ab8:	4918      	ldr	r1, [pc, #96]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	608b      	str	r3, [r1, #8]
 8000ac0:	e006      	b.n	8000ad0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000ac4:	689a      	ldr	r2, [r3, #8]
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	4914      	ldr	r1, [pc, #80]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000acc:	4013      	ands	r3, r2
 8000ace:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d021      	beq.n	8000b20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000ade:	68da      	ldr	r2, [r3, #12]
 8000ae0:	490e      	ldr	r1, [pc, #56]	; (8000b1c <HAL_GPIO_Init+0x2d0>)
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	60cb      	str	r3, [r1, #12]
 8000ae8:	e021      	b.n	8000b2e <HAL_GPIO_Init+0x2e2>
 8000aea:	bf00      	nop
 8000aec:	10320000 	.word	0x10320000
 8000af0:	10310000 	.word	0x10310000
 8000af4:	10220000 	.word	0x10220000
 8000af8:	10210000 	.word	0x10210000
 8000afc:	10120000 	.word	0x10120000
 8000b00:	10110000 	.word	0x10110000
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40010000 	.word	0x40010000
 8000b0c:	40010800 	.word	0x40010800
 8000b10:	40010c00 	.word	0x40010c00
 8000b14:	40011000 	.word	0x40011000
 8000b18:	40011400 	.word	0x40011400
 8000b1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <HAL_GPIO_Init+0x304>)
 8000b22:	68da      	ldr	r2, [r3, #12]
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	43db      	mvns	r3, r3
 8000b28:	4909      	ldr	r1, [pc, #36]	; (8000b50 <HAL_GPIO_Init+0x304>)
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	3301      	adds	r3, #1
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f47f ae8e 	bne.w	8000860 <HAL_GPIO_Init+0x14>
  }
}
 8000b44:	bf00      	nop
 8000b46:	bf00      	nop
 8000b48:	372c      	adds	r7, #44	; 0x2c
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	40010400 	.word	0x40010400

08000b54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689a      	ldr	r2, [r3, #8]
 8000b64:	887b      	ldrh	r3, [r7, #2]
 8000b66:	4013      	ands	r3, r2
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d002      	beq.n	8000b72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	73fb      	strb	r3, [r7, #15]
 8000b70:	e001      	b.n	8000b76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b72:	2300      	movs	r3, #0
 8000b74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr

08000b82 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	807b      	strh	r3, [r7, #2]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b92:	787b      	ldrb	r3, [r7, #1]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d003      	beq.n	8000ba0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b98:	887a      	ldrh	r2, [r7, #2]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b9e:	e003      	b.n	8000ba8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ba0:	887b      	ldrh	r3, [r7, #2]
 8000ba2:	041a      	lsls	r2, r3, #16
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	611a      	str	r2, [r3, #16]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr

08000bb2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b085      	sub	sp, #20
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bc4:	887a      	ldrh	r2, [r7, #2]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	041a      	lsls	r2, r3, #16
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	43d9      	mvns	r1, r3
 8000bd0:	887b      	ldrh	r3, [r7, #2]
 8000bd2:	400b      	ands	r3, r1
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	611a      	str	r2, [r3, #16]
}
 8000bda:	bf00      	nop
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d101      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e26c      	b.n	80010d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f000 8087 	beq.w	8000d12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c04:	4b92      	ldr	r3, [pc, #584]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 030c 	and.w	r3, r3, #12
 8000c0c:	2b04      	cmp	r3, #4
 8000c0e:	d00c      	beq.n	8000c2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c10:	4b8f      	ldr	r3, [pc, #572]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 030c 	and.w	r3, r3, #12
 8000c18:	2b08      	cmp	r3, #8
 8000c1a:	d112      	bne.n	8000c42 <HAL_RCC_OscConfig+0x5e>
 8000c1c:	4b8c      	ldr	r3, [pc, #560]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c28:	d10b      	bne.n	8000c42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c2a:	4b89      	ldr	r3, [pc, #548]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d06c      	beq.n	8000d10 <HAL_RCC_OscConfig+0x12c>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d168      	bne.n	8000d10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e246      	b.n	80010d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c4a:	d106      	bne.n	8000c5a <HAL_RCC_OscConfig+0x76>
 8000c4c:	4b80      	ldr	r3, [pc, #512]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a7f      	ldr	r2, [pc, #508]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	e02e      	b.n	8000cb8 <HAL_RCC_OscConfig+0xd4>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d10c      	bne.n	8000c7c <HAL_RCC_OscConfig+0x98>
 8000c62:	4b7b      	ldr	r3, [pc, #492]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a7a      	ldr	r2, [pc, #488]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	4b78      	ldr	r3, [pc, #480]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a77      	ldr	r2, [pc, #476]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c78:	6013      	str	r3, [r2, #0]
 8000c7a:	e01d      	b.n	8000cb8 <HAL_RCC_OscConfig+0xd4>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c84:	d10c      	bne.n	8000ca0 <HAL_RCC_OscConfig+0xbc>
 8000c86:	4b72      	ldr	r3, [pc, #456]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a71      	ldr	r2, [pc, #452]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	4b6f      	ldr	r3, [pc, #444]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a6e      	ldr	r2, [pc, #440]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	e00b      	b.n	8000cb8 <HAL_RCC_OscConfig+0xd4>
 8000ca0:	4b6b      	ldr	r3, [pc, #428]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a6a      	ldr	r2, [pc, #424]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b68      	ldr	r3, [pc, #416]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a67      	ldr	r2, [pc, #412]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d013      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc0:	f7ff fcd6 	bl	8000670 <HAL_GetTick>
 8000cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc6:	e008      	b.n	8000cda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cc8:	f7ff fcd2 	bl	8000670 <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	2b64      	cmp	r3, #100	; 0x64
 8000cd4:	d901      	bls.n	8000cda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e1fa      	b.n	80010d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cda:	4b5d      	ldr	r3, [pc, #372]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0f0      	beq.n	8000cc8 <HAL_RCC_OscConfig+0xe4>
 8000ce6:	e014      	b.n	8000d12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce8:	f7ff fcc2 	bl	8000670 <HAL_GetTick>
 8000cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cee:	e008      	b.n	8000d02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cf0:	f7ff fcbe 	bl	8000670 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	2b64      	cmp	r3, #100	; 0x64
 8000cfc:	d901      	bls.n	8000d02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e1e6      	b.n	80010d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d02:	4b53      	ldr	r3, [pc, #332]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1f0      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x10c>
 8000d0e:	e000      	b.n	8000d12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d063      	beq.n	8000de6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d1e:	4b4c      	ldr	r3, [pc, #304]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 030c 	and.w	r3, r3, #12
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00b      	beq.n	8000d42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d2a:	4b49      	ldr	r3, [pc, #292]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 030c 	and.w	r3, r3, #12
 8000d32:	2b08      	cmp	r3, #8
 8000d34:	d11c      	bne.n	8000d70 <HAL_RCC_OscConfig+0x18c>
 8000d36:	4b46      	ldr	r3, [pc, #280]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d116      	bne.n	8000d70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d42:	4b43      	ldr	r3, [pc, #268]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d005      	beq.n	8000d5a <HAL_RCC_OscConfig+0x176>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	691b      	ldr	r3, [r3, #16]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d001      	beq.n	8000d5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e1ba      	b.n	80010d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d5a:	4b3d      	ldr	r3, [pc, #244]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	4939      	ldr	r1, [pc, #228]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d6e:	e03a      	b.n	8000de6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	691b      	ldr	r3, [r3, #16]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d020      	beq.n	8000dba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d78:	4b36      	ldr	r3, [pc, #216]	; (8000e54 <HAL_RCC_OscConfig+0x270>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d7e:	f7ff fc77 	bl	8000670 <HAL_GetTick>
 8000d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d84:	e008      	b.n	8000d98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d86:	f7ff fc73 	bl	8000670 <HAL_GetTick>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d901      	bls.n	8000d98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d94:	2303      	movs	r3, #3
 8000d96:	e19b      	b.n	80010d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d98:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0302 	and.w	r3, r3, #2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0f0      	beq.n	8000d86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da4:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	695b      	ldr	r3, [r3, #20]
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	4927      	ldr	r1, [pc, #156]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	4313      	orrs	r3, r2
 8000db6:	600b      	str	r3, [r1, #0]
 8000db8:	e015      	b.n	8000de6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dba:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <HAL_RCC_OscConfig+0x270>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc0:	f7ff fc56 	bl	8000670 <HAL_GetTick>
 8000dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dc6:	e008      	b.n	8000dda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dc8:	f7ff fc52 	bl	8000670 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d901      	bls.n	8000dda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e17a      	b.n	80010d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dda:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1f0      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0308 	and.w	r3, r3, #8
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d03a      	beq.n	8000e68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d019      	beq.n	8000e2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <HAL_RCC_OscConfig+0x274>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e00:	f7ff fc36 	bl	8000670 <HAL_GetTick>
 8000e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e06:	e008      	b.n	8000e1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e08:	f7ff fc32 	bl	8000670 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d901      	bls.n	8000e1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e15a      	b.n	80010d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0f0      	beq.n	8000e08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e26:	2001      	movs	r0, #1
 8000e28:	f000 fad8 	bl	80013dc <RCC_Delay>
 8000e2c:	e01c      	b.n	8000e68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_RCC_OscConfig+0x274>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e34:	f7ff fc1c 	bl	8000670 <HAL_GetTick>
 8000e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e3a:	e00f      	b.n	8000e5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e3c:	f7ff fc18 	bl	8000670 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d908      	bls.n	8000e5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e140      	b.n	80010d0 <HAL_RCC_OscConfig+0x4ec>
 8000e4e:	bf00      	nop
 8000e50:	40021000 	.word	0x40021000
 8000e54:	42420000 	.word	0x42420000
 8000e58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e5c:	4b9e      	ldr	r3, [pc, #632]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1e9      	bne.n	8000e3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f000 80a6 	beq.w	8000fc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e76:	2300      	movs	r3, #0
 8000e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e7a:	4b97      	ldr	r3, [pc, #604]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10d      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	4b94      	ldr	r3, [pc, #592]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	4a93      	ldr	r2, [pc, #588]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e90:	61d3      	str	r3, [r2, #28]
 8000e92:	4b91      	ldr	r3, [pc, #580]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea2:	4b8e      	ldr	r3, [pc, #568]	; (80010dc <HAL_RCC_OscConfig+0x4f8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d118      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eae:	4b8b      	ldr	r3, [pc, #556]	; (80010dc <HAL_RCC_OscConfig+0x4f8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a8a      	ldr	r2, [pc, #552]	; (80010dc <HAL_RCC_OscConfig+0x4f8>)
 8000eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eba:	f7ff fbd9 	bl	8000670 <HAL_GetTick>
 8000ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec0:	e008      	b.n	8000ed4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ec2:	f7ff fbd5 	bl	8000670 <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	2b64      	cmp	r3, #100	; 0x64
 8000ece:	d901      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e0fd      	b.n	80010d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed4:	4b81      	ldr	r3, [pc, #516]	; (80010dc <HAL_RCC_OscConfig+0x4f8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d0f0      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d106      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x312>
 8000ee8:	4b7b      	ldr	r3, [pc, #492]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	4a7a      	ldr	r2, [pc, #488]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6213      	str	r3, [r2, #32]
 8000ef4:	e02d      	b.n	8000f52 <HAL_RCC_OscConfig+0x36e>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d10c      	bne.n	8000f18 <HAL_RCC_OscConfig+0x334>
 8000efe:	4b76      	ldr	r3, [pc, #472]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000f00:	6a1b      	ldr	r3, [r3, #32]
 8000f02:	4a75      	ldr	r2, [pc, #468]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000f04:	f023 0301 	bic.w	r3, r3, #1
 8000f08:	6213      	str	r3, [r2, #32]
 8000f0a:	4b73      	ldr	r3, [pc, #460]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000f0c:	6a1b      	ldr	r3, [r3, #32]
 8000f0e:	4a72      	ldr	r2, [pc, #456]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000f10:	f023 0304 	bic.w	r3, r3, #4
 8000f14:	6213      	str	r3, [r2, #32]
 8000f16:	e01c      	b.n	8000f52 <HAL_RCC_OscConfig+0x36e>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	2b05      	cmp	r3, #5
 8000f1e:	d10c      	bne.n	8000f3a <HAL_RCC_OscConfig+0x356>
 8000f20:	4b6d      	ldr	r3, [pc, #436]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	4a6c      	ldr	r2, [pc, #432]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	6213      	str	r3, [r2, #32]
 8000f2c:	4b6a      	ldr	r3, [pc, #424]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000f2e:	6a1b      	ldr	r3, [r3, #32]
 8000f30:	4a69      	ldr	r2, [pc, #420]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6213      	str	r3, [r2, #32]
 8000f38:	e00b      	b.n	8000f52 <HAL_RCC_OscConfig+0x36e>
 8000f3a:	4b67      	ldr	r3, [pc, #412]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	4a66      	ldr	r2, [pc, #408]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000f40:	f023 0301 	bic.w	r3, r3, #1
 8000f44:	6213      	str	r3, [r2, #32]
 8000f46:	4b64      	ldr	r3, [pc, #400]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000f48:	6a1b      	ldr	r3, [r3, #32]
 8000f4a:	4a63      	ldr	r2, [pc, #396]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000f4c:	f023 0304 	bic.w	r3, r3, #4
 8000f50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d015      	beq.n	8000f86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f5a:	f7ff fb89 	bl	8000670 <HAL_GetTick>
 8000f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f60:	e00a      	b.n	8000f78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f62:	f7ff fb85 	bl	8000670 <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e0ab      	b.n	80010d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f78:	4b57      	ldr	r3, [pc, #348]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d0ee      	beq.n	8000f62 <HAL_RCC_OscConfig+0x37e>
 8000f84:	e014      	b.n	8000fb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f86:	f7ff fb73 	bl	8000670 <HAL_GetTick>
 8000f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f8c:	e00a      	b.n	8000fa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f8e:	f7ff fb6f 	bl	8000670 <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e095      	b.n	80010d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fa4:	4b4c      	ldr	r3, [pc, #304]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1ee      	bne.n	8000f8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fb0:	7dfb      	ldrb	r3, [r7, #23]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d105      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fb6:	4b48      	ldr	r3, [pc, #288]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a47      	ldr	r2, [pc, #284]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 8081 	beq.w	80010ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fcc:	4b42      	ldr	r3, [pc, #264]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 030c 	and.w	r3, r3, #12
 8000fd4:	2b08      	cmp	r3, #8
 8000fd6:	d061      	beq.n	800109c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	69db      	ldr	r3, [r3, #28]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d146      	bne.n	800106e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fe0:	4b3f      	ldr	r3, [pc, #252]	; (80010e0 <HAL_RCC_OscConfig+0x4fc>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe6:	f7ff fb43 	bl	8000670 <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fee:	f7ff fb3f 	bl	8000670 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e067      	b.n	80010d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001000:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f0      	bne.n	8000fee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001014:	d108      	bne.n	8001028 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001016:	4b30      	ldr	r3, [pc, #192]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	492d      	ldr	r1, [pc, #180]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8001024:	4313      	orrs	r3, r2
 8001026:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001028:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a19      	ldr	r1, [r3, #32]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	430b      	orrs	r3, r1
 800103a:	4927      	ldr	r1, [pc, #156]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 800103c:	4313      	orrs	r3, r2
 800103e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001040:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <HAL_RCC_OscConfig+0x4fc>)
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001046:	f7ff fb13 	bl	8000670 <HAL_GetTick>
 800104a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800104e:	f7ff fb0f 	bl	8000670 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e037      	b.n	80010d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001060:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0f0      	beq.n	800104e <HAL_RCC_OscConfig+0x46a>
 800106c:	e02f      	b.n	80010ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <HAL_RCC_OscConfig+0x4fc>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fafc 	bl	8000670 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800107c:	f7ff faf8 	bl	8000670 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e020      	b.n	80010d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f0      	bne.n	800107c <HAL_RCC_OscConfig+0x498>
 800109a:	e018      	b.n	80010ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d101      	bne.n	80010a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e013      	b.n	80010d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_RCC_OscConfig+0x4f4>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d106      	bne.n	80010ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d001      	beq.n	80010ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40007000 	.word	0x40007000
 80010e0:	42420060 	.word	0x42420060

080010e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e0d0      	b.n	800129a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010f8:	4b6a      	ldr	r3, [pc, #424]	; (80012a4 <HAL_RCC_ClockConfig+0x1c0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	429a      	cmp	r2, r3
 8001104:	d910      	bls.n	8001128 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001106:	4b67      	ldr	r3, [pc, #412]	; (80012a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f023 0207 	bic.w	r2, r3, #7
 800110e:	4965      	ldr	r1, [pc, #404]	; (80012a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	4313      	orrs	r3, r2
 8001114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001116:	4b63      	ldr	r3, [pc, #396]	; (80012a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	d001      	beq.n	8001128 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e0b8      	b.n	800129a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d020      	beq.n	8001176 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	2b00      	cmp	r3, #0
 800113e:	d005      	beq.n	800114c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001140:	4b59      	ldr	r3, [pc, #356]	; (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	4a58      	ldr	r2, [pc, #352]	; (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001146:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800114a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001158:	4b53      	ldr	r3, [pc, #332]	; (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	4a52      	ldr	r2, [pc, #328]	; (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 800115e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001162:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001164:	4b50      	ldr	r3, [pc, #320]	; (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	494d      	ldr	r1, [pc, #308]	; (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001172:	4313      	orrs	r3, r2
 8001174:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	2b00      	cmp	r3, #0
 8001180:	d040      	beq.n	8001204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d107      	bne.n	800119a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118a:	4b47      	ldr	r3, [pc, #284]	; (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d115      	bne.n	80011c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e07f      	b.n	800129a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d107      	bne.n	80011b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011a2:	4b41      	ldr	r3, [pc, #260]	; (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d109      	bne.n	80011c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e073      	b.n	800129a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b2:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e06b      	b.n	800129a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011c2:	4b39      	ldr	r3, [pc, #228]	; (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f023 0203 	bic.w	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	4936      	ldr	r1, [pc, #216]	; (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 80011d0:	4313      	orrs	r3, r2
 80011d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011d4:	f7ff fa4c 	bl	8000670 <HAL_GetTick>
 80011d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011da:	e00a      	b.n	80011f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011dc:	f7ff fa48 	bl	8000670 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e053      	b.n	800129a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011f2:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 020c 	and.w	r2, r3, #12
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	429a      	cmp	r2, r3
 8001202:	d1eb      	bne.n	80011dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001204:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	d210      	bcs.n	8001234 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001212:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f023 0207 	bic.w	r2, r3, #7
 800121a:	4922      	ldr	r1, [pc, #136]	; (80012a4 <HAL_RCC_ClockConfig+0x1c0>)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	4313      	orrs	r3, r2
 8001220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001222:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	d001      	beq.n	8001234 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e032      	b.n	800129a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	2b00      	cmp	r3, #0
 800123e:	d008      	beq.n	8001252 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	4916      	ldr	r1, [pc, #88]	; (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	4313      	orrs	r3, r2
 8001250:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	2b00      	cmp	r3, #0
 800125c:	d009      	beq.n	8001272 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	490e      	ldr	r1, [pc, #56]	; (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 800126e:	4313      	orrs	r3, r2
 8001270:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001272:	f000 f821 	bl	80012b8 <HAL_RCC_GetSysClockFreq>
 8001276:	4602      	mov	r2, r0
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_RCC_ClockConfig+0x1c4>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	091b      	lsrs	r3, r3, #4
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	490a      	ldr	r1, [pc, #40]	; (80012ac <HAL_RCC_ClockConfig+0x1c8>)
 8001284:	5ccb      	ldrb	r3, [r1, r3]
 8001286:	fa22 f303 	lsr.w	r3, r2, r3
 800128a:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <HAL_RCC_ClockConfig+0x1cc>)
 800128c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_RCC_ClockConfig+0x1d0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f9aa 	bl	80005ec <HAL_InitTick>

  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40022000 	.word	0x40022000
 80012a8:	40021000 	.word	0x40021000
 80012ac:	080021fc 	.word	0x080021fc
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000004 	.word	0x20000004

080012b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012b8:	b490      	push	{r4, r7}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012be:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <HAL_RCC_GetSysClockFreq+0xb0>)
 80012c0:	1d3c      	adds	r4, r7, #4
 80012c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012c8:	f240 2301 	movw	r3, #513	; 0x201
 80012cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012e2:	4b22      	ldr	r3, [pc, #136]	; (800136c <HAL_RCC_GetSysClockFreq+0xb4>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d002      	beq.n	80012f8 <HAL_RCC_GetSysClockFreq+0x40>
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d003      	beq.n	80012fe <HAL_RCC_GetSysClockFreq+0x46>
 80012f6:	e02d      	b.n	8001354 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012fa:	623b      	str	r3, [r7, #32]
      break;
 80012fc:	e02d      	b.n	800135a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	0c9b      	lsrs	r3, r3, #18
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800130a:	4413      	add	r3, r2
 800130c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001310:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d013      	beq.n	8001344 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <HAL_RCC_GetSysClockFreq+0xb4>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	0c5b      	lsrs	r3, r3, #17
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800132a:	4413      	add	r3, r2
 800132c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001330:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001336:	fb02 f203 	mul.w	r2, r2, r3
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
 8001342:	e004      	b.n	800134e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001348:	fb02 f303 	mul.w	r3, r2, r3
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	623b      	str	r3, [r7, #32]
      break;
 8001352:	e002      	b.n	800135a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001356:	623b      	str	r3, [r7, #32]
      break;
 8001358:	bf00      	nop
    }
  }
  return sysclockfreq;
 800135a:	6a3b      	ldr	r3, [r7, #32]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3728      	adds	r7, #40	; 0x28
 8001360:	46bd      	mov	sp, r7
 8001362:	bc90      	pop	{r4, r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	080021ec 	.word	0x080021ec
 800136c:	40021000 	.word	0x40021000
 8001370:	007a1200 	.word	0x007a1200
 8001374:	003d0900 	.word	0x003d0900

08001378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800137c:	4b02      	ldr	r3, [pc, #8]	; (8001388 <HAL_RCC_GetHCLKFreq+0x10>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	20000000 	.word	0x20000000

0800138c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001390:	f7ff fff2 	bl	8001378 <HAL_RCC_GetHCLKFreq>
 8001394:	4602      	mov	r2, r0
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	f003 0307 	and.w	r3, r3, #7
 80013a0:	4903      	ldr	r1, [pc, #12]	; (80013b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013a2:	5ccb      	ldrb	r3, [r1, r3]
 80013a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40021000 	.word	0x40021000
 80013b0:	0800220c 	.word	0x0800220c

080013b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013b8:	f7ff ffde 	bl	8001378 <HAL_RCC_GetHCLKFreq>
 80013bc:	4602      	mov	r2, r0
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	0adb      	lsrs	r3, r3, #11
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	4903      	ldr	r1, [pc, #12]	; (80013d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013ca:	5ccb      	ldrb	r3, [r1, r3]
 80013cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40021000 	.word	0x40021000
 80013d8:	0800220c 	.word	0x0800220c

080013dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <RCC_Delay+0x34>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <RCC_Delay+0x38>)
 80013ea:	fba2 2303 	umull	r2, r3, r2, r3
 80013ee:	0a5b      	lsrs	r3, r3, #9
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	fb02 f303 	mul.w	r3, r2, r3
 80013f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013f8:	bf00      	nop
  }
  while (Delay --);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	1e5a      	subs	r2, r3, #1
 80013fe:	60fa      	str	r2, [r7, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f9      	bne.n	80013f8 <RCC_Delay+0x1c>
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	20000000 	.word	0x20000000
 8001414:	10624dd3 	.word	0x10624dd3

08001418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e03f      	b.n	80014aa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d106      	bne.n	8001444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7fe ffe8 	bl	8000414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2224      	movs	r2, #36	; 0x24
 8001448:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68da      	ldr	r2, [r3, #12]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800145a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f9a3 	bl	80017a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	691a      	ldr	r2, [r3, #16]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	695a      	ldr	r2, [r3, #20]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2220      	movs	r2, #32
 800149c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2220      	movs	r2, #32
 80014a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b08a      	sub	sp, #40	; 0x28
 80014b6:	af02      	add	r7, sp, #8
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	603b      	str	r3, [r7, #0]
 80014be:	4613      	mov	r3, r2
 80014c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b20      	cmp	r3, #32
 80014d0:	d17c      	bne.n	80015cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <HAL_UART_Transmit+0x2c>
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e075      	b.n	80015ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d101      	bne.n	80014f0 <HAL_UART_Transmit+0x3e>
 80014ec:	2302      	movs	r3, #2
 80014ee:	e06e      	b.n	80015ce <HAL_UART_Transmit+0x11c>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2200      	movs	r2, #0
 80014fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2221      	movs	r2, #33	; 0x21
 8001502:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001506:	f7ff f8b3 	bl	8000670 <HAL_GetTick>
 800150a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	88fa      	ldrh	r2, [r7, #6]
 8001510:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	88fa      	ldrh	r2, [r7, #6]
 8001516:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001520:	d108      	bne.n	8001534 <HAL_UART_Transmit+0x82>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d104      	bne.n	8001534 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	e003      	b.n	800153c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001544:	e02a      	b.n	800159c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	2200      	movs	r2, #0
 800154e:	2180      	movs	r1, #128	; 0x80
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f000 f8df 	bl	8001714 <UART_WaitOnFlagUntilTimeout>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e036      	b.n	80015ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10b      	bne.n	800157e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001574:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	3302      	adds	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
 800157c:	e007      	b.n	800158e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	781a      	ldrb	r2, [r3, #0]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	3301      	adds	r3, #1
 800158c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001592:	b29b      	uxth	r3, r3
 8001594:	3b01      	subs	r3, #1
 8001596:	b29a      	uxth	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1cf      	bne.n	8001546 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	2200      	movs	r2, #0
 80015ae:	2140      	movs	r1, #64	; 0x40
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f000 f8af 	bl	8001714 <UART_WaitOnFlagUntilTimeout>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e006      	b.n	80015ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2220      	movs	r2, #32
 80015c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	e000      	b.n	80015ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80015cc:	2302      	movs	r3, #2
  }
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3720      	adds	r7, #32
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b08a      	sub	sp, #40	; 0x28
 80015da:	af02      	add	r7, sp, #8
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	4613      	mov	r3, r2
 80015e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b20      	cmp	r3, #32
 80015f4:	f040 8089 	bne.w	800170a <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <HAL_UART_Receive+0x2e>
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e081      	b.n	800170c <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800160e:	2b01      	cmp	r3, #1
 8001610:	d101      	bne.n	8001616 <HAL_UART_Receive+0x40>
 8001612:	2302      	movs	r3, #2
 8001614:	e07a      	b.n	800170c <HAL_UART_Receive+0x136>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2200      	movs	r2, #0
 8001622:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2222      	movs	r2, #34	; 0x22
 8001628:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800162c:	f7ff f820 	bl	8000670 <HAL_GetTick>
 8001630:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	88fa      	ldrh	r2, [r7, #6]
 8001636:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	88fa      	ldrh	r2, [r7, #6]
 800163c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001646:	d108      	bne.n	800165a <HAL_UART_Receive+0x84>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d104      	bne.n	800165a <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	61bb      	str	r3, [r7, #24]
 8001658:	e003      	b.n	8001662 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800166a:	e043      	b.n	80016f4 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	2200      	movs	r2, #0
 8001674:	2120      	movs	r1, #32
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 f84c 	bl	8001714 <UART_WaitOnFlagUntilTimeout>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e042      	b.n	800170c <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10c      	bne.n	80016a6 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	b29b      	uxth	r3, r3
 8001694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001698:	b29a      	uxth	r2, r3
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	3302      	adds	r3, #2
 80016a2:	61bb      	str	r3, [r7, #24]
 80016a4:	e01f      	b.n	80016e6 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016ae:	d007      	beq.n	80016c0 <HAL_UART_Receive+0xea>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10a      	bne.n	80016ce <HAL_UART_Receive+0xf8>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d106      	bne.n	80016ce <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	701a      	strb	r2, [r3, #0]
 80016cc:	e008      	b.n	80016e0 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	3301      	adds	r3, #1
 80016e4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	3b01      	subs	r3, #1
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1b6      	bne.n	800166c <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2220      	movs	r2, #32
 8001702:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 800170a:	2302      	movs	r3, #2
  }
}
 800170c:	4618      	mov	r0, r3
 800170e:	3720      	adds	r7, #32
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	4613      	mov	r3, r2
 8001722:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001724:	e02c      	b.n	8001780 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800172c:	d028      	beq.n	8001780 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d007      	beq.n	8001744 <UART_WaitOnFlagUntilTimeout+0x30>
 8001734:	f7fe ff9c 	bl	8000670 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	429a      	cmp	r2, r3
 8001742:	d21d      	bcs.n	8001780 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001752:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	695a      	ldr	r2, [r3, #20]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0201 	bic.w	r2, r2, #1
 8001762:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2220      	movs	r2, #32
 8001768:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2220      	movs	r2, #32
 8001770:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e00f      	b.n	80017a0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	4013      	ands	r3, r2
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	429a      	cmp	r2, r3
 800178e:	bf0c      	ite	eq
 8001790:	2301      	moveq	r3, #1
 8001792:	2300      	movne	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	429a      	cmp	r2, r3
 800179c:	d0c3      	beq.n	8001726 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80017e2:	f023 030c 	bic.w	r3, r3, #12
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	68b9      	ldr	r1, [r7, #8]
 80017ec:	430b      	orrs	r3, r1
 80017ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699a      	ldr	r2, [r3, #24]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a2c      	ldr	r2, [pc, #176]	; (80018bc <UART_SetConfig+0x114>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d103      	bne.n	8001818 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001810:	f7ff fdd0 	bl	80013b4 <HAL_RCC_GetPCLK2Freq>
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	e002      	b.n	800181e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001818:	f7ff fdb8 	bl	800138c <HAL_RCC_GetPCLK1Freq>
 800181c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	009a      	lsls	r2, r3, #2
 8001828:	441a      	add	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	fbb2 f3f3 	udiv	r3, r2, r3
 8001834:	4a22      	ldr	r2, [pc, #136]	; (80018c0 <UART_SetConfig+0x118>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	0119      	lsls	r1, r3, #4
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	009a      	lsls	r2, r3, #2
 8001848:	441a      	add	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	fbb2 f2f3 	udiv	r2, r2, r3
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <UART_SetConfig+0x118>)
 8001856:	fba3 0302 	umull	r0, r3, r3, r2
 800185a:	095b      	lsrs	r3, r3, #5
 800185c:	2064      	movs	r0, #100	; 0x64
 800185e:	fb00 f303 	mul.w	r3, r0, r3
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	3332      	adds	r3, #50	; 0x32
 8001868:	4a15      	ldr	r2, [pc, #84]	; (80018c0 <UART_SetConfig+0x118>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001874:	4419      	add	r1, r3
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	009a      	lsls	r2, r3, #2
 8001880:	441a      	add	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	fbb2 f2f3 	udiv	r2, r2, r3
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <UART_SetConfig+0x118>)
 800188e:	fba3 0302 	umull	r0, r3, r3, r2
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	2064      	movs	r0, #100	; 0x64
 8001896:	fb00 f303 	mul.w	r3, r0, r3
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	3332      	adds	r3, #50	; 0x32
 80018a0:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <UART_SetConfig+0x118>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	f003 020f 	and.w	r2, r3, #15
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	440a      	add	r2, r1
 80018b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40013800 	.word	0x40013800
 80018c0:	51eb851f 	.word	0x51eb851f

080018c4 <__errno>:
 80018c4:	4b01      	ldr	r3, [pc, #4]	; (80018cc <__errno+0x8>)
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	2000000c 	.word	0x2000000c

080018d0 <__libc_init_array>:
 80018d0:	b570      	push	{r4, r5, r6, lr}
 80018d2:	2600      	movs	r6, #0
 80018d4:	4d0c      	ldr	r5, [pc, #48]	; (8001908 <__libc_init_array+0x38>)
 80018d6:	4c0d      	ldr	r4, [pc, #52]	; (800190c <__libc_init_array+0x3c>)
 80018d8:	1b64      	subs	r4, r4, r5
 80018da:	10a4      	asrs	r4, r4, #2
 80018dc:	42a6      	cmp	r6, r4
 80018de:	d109      	bne.n	80018f4 <__libc_init_array+0x24>
 80018e0:	f000 fc5c 	bl	800219c <_init>
 80018e4:	2600      	movs	r6, #0
 80018e6:	4d0a      	ldr	r5, [pc, #40]	; (8001910 <__libc_init_array+0x40>)
 80018e8:	4c0a      	ldr	r4, [pc, #40]	; (8001914 <__libc_init_array+0x44>)
 80018ea:	1b64      	subs	r4, r4, r5
 80018ec:	10a4      	asrs	r4, r4, #2
 80018ee:	42a6      	cmp	r6, r4
 80018f0:	d105      	bne.n	80018fe <__libc_init_array+0x2e>
 80018f2:	bd70      	pop	{r4, r5, r6, pc}
 80018f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80018f8:	4798      	blx	r3
 80018fa:	3601      	adds	r6, #1
 80018fc:	e7ee      	b.n	80018dc <__libc_init_array+0xc>
 80018fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001902:	4798      	blx	r3
 8001904:	3601      	adds	r6, #1
 8001906:	e7f2      	b.n	80018ee <__libc_init_array+0x1e>
 8001908:	08002248 	.word	0x08002248
 800190c:	08002248 	.word	0x08002248
 8001910:	08002248 	.word	0x08002248
 8001914:	0800224c 	.word	0x0800224c

08001918 <memset>:
 8001918:	4603      	mov	r3, r0
 800191a:	4402      	add	r2, r0
 800191c:	4293      	cmp	r3, r2
 800191e:	d100      	bne.n	8001922 <memset+0xa>
 8001920:	4770      	bx	lr
 8001922:	f803 1b01 	strb.w	r1, [r3], #1
 8001926:	e7f9      	b.n	800191c <memset+0x4>

08001928 <siprintf>:
 8001928:	b40e      	push	{r1, r2, r3}
 800192a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800192e:	b500      	push	{lr}
 8001930:	b09c      	sub	sp, #112	; 0x70
 8001932:	ab1d      	add	r3, sp, #116	; 0x74
 8001934:	9002      	str	r0, [sp, #8]
 8001936:	9006      	str	r0, [sp, #24]
 8001938:	9107      	str	r1, [sp, #28]
 800193a:	9104      	str	r1, [sp, #16]
 800193c:	4808      	ldr	r0, [pc, #32]	; (8001960 <siprintf+0x38>)
 800193e:	4909      	ldr	r1, [pc, #36]	; (8001964 <siprintf+0x3c>)
 8001940:	f853 2b04 	ldr.w	r2, [r3], #4
 8001944:	9105      	str	r1, [sp, #20]
 8001946:	6800      	ldr	r0, [r0, #0]
 8001948:	a902      	add	r1, sp, #8
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	f000 f868 	bl	8001a20 <_svfiprintf_r>
 8001950:	2200      	movs	r2, #0
 8001952:	9b02      	ldr	r3, [sp, #8]
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	b01c      	add	sp, #112	; 0x70
 8001958:	f85d eb04 	ldr.w	lr, [sp], #4
 800195c:	b003      	add	sp, #12
 800195e:	4770      	bx	lr
 8001960:	2000000c 	.word	0x2000000c
 8001964:	ffff0208 	.word	0xffff0208

08001968 <__ssputs_r>:
 8001968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800196c:	688e      	ldr	r6, [r1, #8]
 800196e:	4682      	mov	sl, r0
 8001970:	429e      	cmp	r6, r3
 8001972:	460c      	mov	r4, r1
 8001974:	4690      	mov	r8, r2
 8001976:	461f      	mov	r7, r3
 8001978:	d838      	bhi.n	80019ec <__ssputs_r+0x84>
 800197a:	898a      	ldrh	r2, [r1, #12]
 800197c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001980:	d032      	beq.n	80019e8 <__ssputs_r+0x80>
 8001982:	6825      	ldr	r5, [r4, #0]
 8001984:	6909      	ldr	r1, [r1, #16]
 8001986:	3301      	adds	r3, #1
 8001988:	eba5 0901 	sub.w	r9, r5, r1
 800198c:	6965      	ldr	r5, [r4, #20]
 800198e:	444b      	add	r3, r9
 8001990:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001994:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001998:	106d      	asrs	r5, r5, #1
 800199a:	429d      	cmp	r5, r3
 800199c:	bf38      	it	cc
 800199e:	461d      	movcc	r5, r3
 80019a0:	0553      	lsls	r3, r2, #21
 80019a2:	d531      	bpl.n	8001a08 <__ssputs_r+0xa0>
 80019a4:	4629      	mov	r1, r5
 80019a6:	f000 fb53 	bl	8002050 <_malloc_r>
 80019aa:	4606      	mov	r6, r0
 80019ac:	b950      	cbnz	r0, 80019c4 <__ssputs_r+0x5c>
 80019ae:	230c      	movs	r3, #12
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	f8ca 3000 	str.w	r3, [sl]
 80019b8:	89a3      	ldrh	r3, [r4, #12]
 80019ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019be:	81a3      	strh	r3, [r4, #12]
 80019c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019c4:	464a      	mov	r2, r9
 80019c6:	6921      	ldr	r1, [r4, #16]
 80019c8:	f000 face 	bl	8001f68 <memcpy>
 80019cc:	89a3      	ldrh	r3, [r4, #12]
 80019ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80019d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d6:	81a3      	strh	r3, [r4, #12]
 80019d8:	6126      	str	r6, [r4, #16]
 80019da:	444e      	add	r6, r9
 80019dc:	6026      	str	r6, [r4, #0]
 80019de:	463e      	mov	r6, r7
 80019e0:	6165      	str	r5, [r4, #20]
 80019e2:	eba5 0509 	sub.w	r5, r5, r9
 80019e6:	60a5      	str	r5, [r4, #8]
 80019e8:	42be      	cmp	r6, r7
 80019ea:	d900      	bls.n	80019ee <__ssputs_r+0x86>
 80019ec:	463e      	mov	r6, r7
 80019ee:	4632      	mov	r2, r6
 80019f0:	4641      	mov	r1, r8
 80019f2:	6820      	ldr	r0, [r4, #0]
 80019f4:	f000 fac6 	bl	8001f84 <memmove>
 80019f8:	68a3      	ldr	r3, [r4, #8]
 80019fa:	6822      	ldr	r2, [r4, #0]
 80019fc:	1b9b      	subs	r3, r3, r6
 80019fe:	4432      	add	r2, r6
 8001a00:	2000      	movs	r0, #0
 8001a02:	60a3      	str	r3, [r4, #8]
 8001a04:	6022      	str	r2, [r4, #0]
 8001a06:	e7db      	b.n	80019c0 <__ssputs_r+0x58>
 8001a08:	462a      	mov	r2, r5
 8001a0a:	f000 fb7b 	bl	8002104 <_realloc_r>
 8001a0e:	4606      	mov	r6, r0
 8001a10:	2800      	cmp	r0, #0
 8001a12:	d1e1      	bne.n	80019d8 <__ssputs_r+0x70>
 8001a14:	4650      	mov	r0, sl
 8001a16:	6921      	ldr	r1, [r4, #16]
 8001a18:	f000 face 	bl	8001fb8 <_free_r>
 8001a1c:	e7c7      	b.n	80019ae <__ssputs_r+0x46>
	...

08001a20 <_svfiprintf_r>:
 8001a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a24:	4698      	mov	r8, r3
 8001a26:	898b      	ldrh	r3, [r1, #12]
 8001a28:	4607      	mov	r7, r0
 8001a2a:	061b      	lsls	r3, r3, #24
 8001a2c:	460d      	mov	r5, r1
 8001a2e:	4614      	mov	r4, r2
 8001a30:	b09d      	sub	sp, #116	; 0x74
 8001a32:	d50e      	bpl.n	8001a52 <_svfiprintf_r+0x32>
 8001a34:	690b      	ldr	r3, [r1, #16]
 8001a36:	b963      	cbnz	r3, 8001a52 <_svfiprintf_r+0x32>
 8001a38:	2140      	movs	r1, #64	; 0x40
 8001a3a:	f000 fb09 	bl	8002050 <_malloc_r>
 8001a3e:	6028      	str	r0, [r5, #0]
 8001a40:	6128      	str	r0, [r5, #16]
 8001a42:	b920      	cbnz	r0, 8001a4e <_svfiprintf_r+0x2e>
 8001a44:	230c      	movs	r3, #12
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	e0d1      	b.n	8001bf2 <_svfiprintf_r+0x1d2>
 8001a4e:	2340      	movs	r3, #64	; 0x40
 8001a50:	616b      	str	r3, [r5, #20]
 8001a52:	2300      	movs	r3, #0
 8001a54:	9309      	str	r3, [sp, #36]	; 0x24
 8001a56:	2320      	movs	r3, #32
 8001a58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001a5c:	2330      	movs	r3, #48	; 0x30
 8001a5e:	f04f 0901 	mov.w	r9, #1
 8001a62:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001c0c <_svfiprintf_r+0x1ec>
 8001a6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001a6e:	4623      	mov	r3, r4
 8001a70:	469a      	mov	sl, r3
 8001a72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a76:	b10a      	cbz	r2, 8001a7c <_svfiprintf_r+0x5c>
 8001a78:	2a25      	cmp	r2, #37	; 0x25
 8001a7a:	d1f9      	bne.n	8001a70 <_svfiprintf_r+0x50>
 8001a7c:	ebba 0b04 	subs.w	fp, sl, r4
 8001a80:	d00b      	beq.n	8001a9a <_svfiprintf_r+0x7a>
 8001a82:	465b      	mov	r3, fp
 8001a84:	4622      	mov	r2, r4
 8001a86:	4629      	mov	r1, r5
 8001a88:	4638      	mov	r0, r7
 8001a8a:	f7ff ff6d 	bl	8001968 <__ssputs_r>
 8001a8e:	3001      	adds	r0, #1
 8001a90:	f000 80aa 	beq.w	8001be8 <_svfiprintf_r+0x1c8>
 8001a94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a96:	445a      	add	r2, fp
 8001a98:	9209      	str	r2, [sp, #36]	; 0x24
 8001a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 80a2 	beq.w	8001be8 <_svfiprintf_r+0x1c8>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001aae:	f10a 0a01 	add.w	sl, sl, #1
 8001ab2:	9304      	str	r3, [sp, #16]
 8001ab4:	9307      	str	r3, [sp, #28]
 8001ab6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001aba:	931a      	str	r3, [sp, #104]	; 0x68
 8001abc:	4654      	mov	r4, sl
 8001abe:	2205      	movs	r2, #5
 8001ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ac4:	4851      	ldr	r0, [pc, #324]	; (8001c0c <_svfiprintf_r+0x1ec>)
 8001ac6:	f000 fa41 	bl	8001f4c <memchr>
 8001aca:	9a04      	ldr	r2, [sp, #16]
 8001acc:	b9d8      	cbnz	r0, 8001b06 <_svfiprintf_r+0xe6>
 8001ace:	06d0      	lsls	r0, r2, #27
 8001ad0:	bf44      	itt	mi
 8001ad2:	2320      	movmi	r3, #32
 8001ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ad8:	0711      	lsls	r1, r2, #28
 8001ada:	bf44      	itt	mi
 8001adc:	232b      	movmi	r3, #43	; 0x2b
 8001ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8001ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8001ae8:	d015      	beq.n	8001b16 <_svfiprintf_r+0xf6>
 8001aea:	4654      	mov	r4, sl
 8001aec:	2000      	movs	r0, #0
 8001aee:	f04f 0c0a 	mov.w	ip, #10
 8001af2:	9a07      	ldr	r2, [sp, #28]
 8001af4:	4621      	mov	r1, r4
 8001af6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001afa:	3b30      	subs	r3, #48	; 0x30
 8001afc:	2b09      	cmp	r3, #9
 8001afe:	d94e      	bls.n	8001b9e <_svfiprintf_r+0x17e>
 8001b00:	b1b0      	cbz	r0, 8001b30 <_svfiprintf_r+0x110>
 8001b02:	9207      	str	r2, [sp, #28]
 8001b04:	e014      	b.n	8001b30 <_svfiprintf_r+0x110>
 8001b06:	eba0 0308 	sub.w	r3, r0, r8
 8001b0a:	fa09 f303 	lsl.w	r3, r9, r3
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	46a2      	mov	sl, r4
 8001b12:	9304      	str	r3, [sp, #16]
 8001b14:	e7d2      	b.n	8001abc <_svfiprintf_r+0x9c>
 8001b16:	9b03      	ldr	r3, [sp, #12]
 8001b18:	1d19      	adds	r1, r3, #4
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	9103      	str	r1, [sp, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bfbb      	ittet	lt
 8001b22:	425b      	neglt	r3, r3
 8001b24:	f042 0202 	orrlt.w	r2, r2, #2
 8001b28:	9307      	strge	r3, [sp, #28]
 8001b2a:	9307      	strlt	r3, [sp, #28]
 8001b2c:	bfb8      	it	lt
 8001b2e:	9204      	strlt	r2, [sp, #16]
 8001b30:	7823      	ldrb	r3, [r4, #0]
 8001b32:	2b2e      	cmp	r3, #46	; 0x2e
 8001b34:	d10c      	bne.n	8001b50 <_svfiprintf_r+0x130>
 8001b36:	7863      	ldrb	r3, [r4, #1]
 8001b38:	2b2a      	cmp	r3, #42	; 0x2a
 8001b3a:	d135      	bne.n	8001ba8 <_svfiprintf_r+0x188>
 8001b3c:	9b03      	ldr	r3, [sp, #12]
 8001b3e:	3402      	adds	r4, #2
 8001b40:	1d1a      	adds	r2, r3, #4
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	9203      	str	r2, [sp, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	bfb8      	it	lt
 8001b4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001b4e:	9305      	str	r3, [sp, #20]
 8001b50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001c1c <_svfiprintf_r+0x1fc>
 8001b54:	2203      	movs	r2, #3
 8001b56:	4650      	mov	r0, sl
 8001b58:	7821      	ldrb	r1, [r4, #0]
 8001b5a:	f000 f9f7 	bl	8001f4c <memchr>
 8001b5e:	b140      	cbz	r0, 8001b72 <_svfiprintf_r+0x152>
 8001b60:	2340      	movs	r3, #64	; 0x40
 8001b62:	eba0 000a 	sub.w	r0, r0, sl
 8001b66:	fa03 f000 	lsl.w	r0, r3, r0
 8001b6a:	9b04      	ldr	r3, [sp, #16]
 8001b6c:	3401      	adds	r4, #1
 8001b6e:	4303      	orrs	r3, r0
 8001b70:	9304      	str	r3, [sp, #16]
 8001b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b76:	2206      	movs	r2, #6
 8001b78:	4825      	ldr	r0, [pc, #148]	; (8001c10 <_svfiprintf_r+0x1f0>)
 8001b7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001b7e:	f000 f9e5 	bl	8001f4c <memchr>
 8001b82:	2800      	cmp	r0, #0
 8001b84:	d038      	beq.n	8001bf8 <_svfiprintf_r+0x1d8>
 8001b86:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <_svfiprintf_r+0x1f4>)
 8001b88:	bb1b      	cbnz	r3, 8001bd2 <_svfiprintf_r+0x1b2>
 8001b8a:	9b03      	ldr	r3, [sp, #12]
 8001b8c:	3307      	adds	r3, #7
 8001b8e:	f023 0307 	bic.w	r3, r3, #7
 8001b92:	3308      	adds	r3, #8
 8001b94:	9303      	str	r3, [sp, #12]
 8001b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b98:	4433      	add	r3, r6
 8001b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8001b9c:	e767      	b.n	8001a6e <_svfiprintf_r+0x4e>
 8001b9e:	460c      	mov	r4, r1
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ba6:	e7a5      	b.n	8001af4 <_svfiprintf_r+0xd4>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f04f 0c0a 	mov.w	ip, #10
 8001bae:	4619      	mov	r1, r3
 8001bb0:	3401      	adds	r4, #1
 8001bb2:	9305      	str	r3, [sp, #20]
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001bba:	3a30      	subs	r2, #48	; 0x30
 8001bbc:	2a09      	cmp	r2, #9
 8001bbe:	d903      	bls.n	8001bc8 <_svfiprintf_r+0x1a8>
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0c5      	beq.n	8001b50 <_svfiprintf_r+0x130>
 8001bc4:	9105      	str	r1, [sp, #20]
 8001bc6:	e7c3      	b.n	8001b50 <_svfiprintf_r+0x130>
 8001bc8:	4604      	mov	r4, r0
 8001bca:	2301      	movs	r3, #1
 8001bcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8001bd0:	e7f0      	b.n	8001bb4 <_svfiprintf_r+0x194>
 8001bd2:	ab03      	add	r3, sp, #12
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	462a      	mov	r2, r5
 8001bd8:	4638      	mov	r0, r7
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <_svfiprintf_r+0x1f8>)
 8001bdc:	a904      	add	r1, sp, #16
 8001bde:	f3af 8000 	nop.w
 8001be2:	1c42      	adds	r2, r0, #1
 8001be4:	4606      	mov	r6, r0
 8001be6:	d1d6      	bne.n	8001b96 <_svfiprintf_r+0x176>
 8001be8:	89ab      	ldrh	r3, [r5, #12]
 8001bea:	065b      	lsls	r3, r3, #25
 8001bec:	f53f af2c 	bmi.w	8001a48 <_svfiprintf_r+0x28>
 8001bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001bf2:	b01d      	add	sp, #116	; 0x74
 8001bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bf8:	ab03      	add	r3, sp, #12
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	462a      	mov	r2, r5
 8001bfe:	4638      	mov	r0, r7
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <_svfiprintf_r+0x1f8>)
 8001c02:	a904      	add	r1, sp, #16
 8001c04:	f000 f87c 	bl	8001d00 <_printf_i>
 8001c08:	e7eb      	b.n	8001be2 <_svfiprintf_r+0x1c2>
 8001c0a:	bf00      	nop
 8001c0c:	08002214 	.word	0x08002214
 8001c10:	0800221e 	.word	0x0800221e
 8001c14:	00000000 	.word	0x00000000
 8001c18:	08001969 	.word	0x08001969
 8001c1c:	0800221a 	.word	0x0800221a

08001c20 <_printf_common>:
 8001c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c24:	4616      	mov	r6, r2
 8001c26:	4699      	mov	r9, r3
 8001c28:	688a      	ldr	r2, [r1, #8]
 8001c2a:	690b      	ldr	r3, [r1, #16]
 8001c2c:	4607      	mov	r7, r0
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	bfb8      	it	lt
 8001c32:	4613      	movlt	r3, r2
 8001c34:	6033      	str	r3, [r6, #0]
 8001c36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001c3a:	460c      	mov	r4, r1
 8001c3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001c40:	b10a      	cbz	r2, 8001c46 <_printf_common+0x26>
 8001c42:	3301      	adds	r3, #1
 8001c44:	6033      	str	r3, [r6, #0]
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	0699      	lsls	r1, r3, #26
 8001c4a:	bf42      	ittt	mi
 8001c4c:	6833      	ldrmi	r3, [r6, #0]
 8001c4e:	3302      	addmi	r3, #2
 8001c50:	6033      	strmi	r3, [r6, #0]
 8001c52:	6825      	ldr	r5, [r4, #0]
 8001c54:	f015 0506 	ands.w	r5, r5, #6
 8001c58:	d106      	bne.n	8001c68 <_printf_common+0x48>
 8001c5a:	f104 0a19 	add.w	sl, r4, #25
 8001c5e:	68e3      	ldr	r3, [r4, #12]
 8001c60:	6832      	ldr	r2, [r6, #0]
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	42ab      	cmp	r3, r5
 8001c66:	dc28      	bgt.n	8001cba <_printf_common+0x9a>
 8001c68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001c6c:	1e13      	subs	r3, r2, #0
 8001c6e:	6822      	ldr	r2, [r4, #0]
 8001c70:	bf18      	it	ne
 8001c72:	2301      	movne	r3, #1
 8001c74:	0692      	lsls	r2, r2, #26
 8001c76:	d42d      	bmi.n	8001cd4 <_printf_common+0xb4>
 8001c78:	4649      	mov	r1, r9
 8001c7a:	4638      	mov	r0, r7
 8001c7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c80:	47c0      	blx	r8
 8001c82:	3001      	adds	r0, #1
 8001c84:	d020      	beq.n	8001cc8 <_printf_common+0xa8>
 8001c86:	6823      	ldr	r3, [r4, #0]
 8001c88:	68e5      	ldr	r5, [r4, #12]
 8001c8a:	f003 0306 	and.w	r3, r3, #6
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	bf18      	it	ne
 8001c92:	2500      	movne	r5, #0
 8001c94:	6832      	ldr	r2, [r6, #0]
 8001c96:	f04f 0600 	mov.w	r6, #0
 8001c9a:	68a3      	ldr	r3, [r4, #8]
 8001c9c:	bf08      	it	eq
 8001c9e:	1aad      	subeq	r5, r5, r2
 8001ca0:	6922      	ldr	r2, [r4, #16]
 8001ca2:	bf08      	it	eq
 8001ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	bfc4      	itt	gt
 8001cac:	1a9b      	subgt	r3, r3, r2
 8001cae:	18ed      	addgt	r5, r5, r3
 8001cb0:	341a      	adds	r4, #26
 8001cb2:	42b5      	cmp	r5, r6
 8001cb4:	d11a      	bne.n	8001cec <_printf_common+0xcc>
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	e008      	b.n	8001ccc <_printf_common+0xac>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	4652      	mov	r2, sl
 8001cbe:	4649      	mov	r1, r9
 8001cc0:	4638      	mov	r0, r7
 8001cc2:	47c0      	blx	r8
 8001cc4:	3001      	adds	r0, #1
 8001cc6:	d103      	bne.n	8001cd0 <_printf_common+0xb0>
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cd0:	3501      	adds	r5, #1
 8001cd2:	e7c4      	b.n	8001c5e <_printf_common+0x3e>
 8001cd4:	2030      	movs	r0, #48	; 0x30
 8001cd6:	18e1      	adds	r1, r4, r3
 8001cd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ce2:	4422      	add	r2, r4
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001cea:	e7c5      	b.n	8001c78 <_printf_common+0x58>
 8001cec:	2301      	movs	r3, #1
 8001cee:	4622      	mov	r2, r4
 8001cf0:	4649      	mov	r1, r9
 8001cf2:	4638      	mov	r0, r7
 8001cf4:	47c0      	blx	r8
 8001cf6:	3001      	adds	r0, #1
 8001cf8:	d0e6      	beq.n	8001cc8 <_printf_common+0xa8>
 8001cfa:	3601      	adds	r6, #1
 8001cfc:	e7d9      	b.n	8001cb2 <_printf_common+0x92>
	...

08001d00 <_printf_i>:
 8001d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d04:	460c      	mov	r4, r1
 8001d06:	7e27      	ldrb	r7, [r4, #24]
 8001d08:	4691      	mov	r9, r2
 8001d0a:	2f78      	cmp	r7, #120	; 0x78
 8001d0c:	4680      	mov	r8, r0
 8001d0e:	469a      	mov	sl, r3
 8001d10:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001d12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001d16:	d807      	bhi.n	8001d28 <_printf_i+0x28>
 8001d18:	2f62      	cmp	r7, #98	; 0x62
 8001d1a:	d80a      	bhi.n	8001d32 <_printf_i+0x32>
 8001d1c:	2f00      	cmp	r7, #0
 8001d1e:	f000 80d9 	beq.w	8001ed4 <_printf_i+0x1d4>
 8001d22:	2f58      	cmp	r7, #88	; 0x58
 8001d24:	f000 80a4 	beq.w	8001e70 <_printf_i+0x170>
 8001d28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001d2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001d30:	e03a      	b.n	8001da8 <_printf_i+0xa8>
 8001d32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001d36:	2b15      	cmp	r3, #21
 8001d38:	d8f6      	bhi.n	8001d28 <_printf_i+0x28>
 8001d3a:	a001      	add	r0, pc, #4	; (adr r0, 8001d40 <_printf_i+0x40>)
 8001d3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001d40:	08001d99 	.word	0x08001d99
 8001d44:	08001dad 	.word	0x08001dad
 8001d48:	08001d29 	.word	0x08001d29
 8001d4c:	08001d29 	.word	0x08001d29
 8001d50:	08001d29 	.word	0x08001d29
 8001d54:	08001d29 	.word	0x08001d29
 8001d58:	08001dad 	.word	0x08001dad
 8001d5c:	08001d29 	.word	0x08001d29
 8001d60:	08001d29 	.word	0x08001d29
 8001d64:	08001d29 	.word	0x08001d29
 8001d68:	08001d29 	.word	0x08001d29
 8001d6c:	08001ebb 	.word	0x08001ebb
 8001d70:	08001ddd 	.word	0x08001ddd
 8001d74:	08001e9d 	.word	0x08001e9d
 8001d78:	08001d29 	.word	0x08001d29
 8001d7c:	08001d29 	.word	0x08001d29
 8001d80:	08001edd 	.word	0x08001edd
 8001d84:	08001d29 	.word	0x08001d29
 8001d88:	08001ddd 	.word	0x08001ddd
 8001d8c:	08001d29 	.word	0x08001d29
 8001d90:	08001d29 	.word	0x08001d29
 8001d94:	08001ea5 	.word	0x08001ea5
 8001d98:	680b      	ldr	r3, [r1, #0]
 8001d9a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001d9e:	1d1a      	adds	r2, r3, #4
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	600a      	str	r2, [r1, #0]
 8001da4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0a4      	b.n	8001ef6 <_printf_i+0x1f6>
 8001dac:	6825      	ldr	r5, [r4, #0]
 8001dae:	6808      	ldr	r0, [r1, #0]
 8001db0:	062e      	lsls	r6, r5, #24
 8001db2:	f100 0304 	add.w	r3, r0, #4
 8001db6:	d50a      	bpl.n	8001dce <_printf_i+0xce>
 8001db8:	6805      	ldr	r5, [r0, #0]
 8001dba:	600b      	str	r3, [r1, #0]
 8001dbc:	2d00      	cmp	r5, #0
 8001dbe:	da03      	bge.n	8001dc8 <_printf_i+0xc8>
 8001dc0:	232d      	movs	r3, #45	; 0x2d
 8001dc2:	426d      	negs	r5, r5
 8001dc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001dc8:	230a      	movs	r3, #10
 8001dca:	485e      	ldr	r0, [pc, #376]	; (8001f44 <_printf_i+0x244>)
 8001dcc:	e019      	b.n	8001e02 <_printf_i+0x102>
 8001dce:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001dd2:	6805      	ldr	r5, [r0, #0]
 8001dd4:	600b      	str	r3, [r1, #0]
 8001dd6:	bf18      	it	ne
 8001dd8:	b22d      	sxthne	r5, r5
 8001dda:	e7ef      	b.n	8001dbc <_printf_i+0xbc>
 8001ddc:	680b      	ldr	r3, [r1, #0]
 8001dde:	6825      	ldr	r5, [r4, #0]
 8001de0:	1d18      	adds	r0, r3, #4
 8001de2:	6008      	str	r0, [r1, #0]
 8001de4:	0628      	lsls	r0, r5, #24
 8001de6:	d501      	bpl.n	8001dec <_printf_i+0xec>
 8001de8:	681d      	ldr	r5, [r3, #0]
 8001dea:	e002      	b.n	8001df2 <_printf_i+0xf2>
 8001dec:	0669      	lsls	r1, r5, #25
 8001dee:	d5fb      	bpl.n	8001de8 <_printf_i+0xe8>
 8001df0:	881d      	ldrh	r5, [r3, #0]
 8001df2:	2f6f      	cmp	r7, #111	; 0x6f
 8001df4:	bf0c      	ite	eq
 8001df6:	2308      	moveq	r3, #8
 8001df8:	230a      	movne	r3, #10
 8001dfa:	4852      	ldr	r0, [pc, #328]	; (8001f44 <_printf_i+0x244>)
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001e02:	6866      	ldr	r6, [r4, #4]
 8001e04:	2e00      	cmp	r6, #0
 8001e06:	bfa8      	it	ge
 8001e08:	6821      	ldrge	r1, [r4, #0]
 8001e0a:	60a6      	str	r6, [r4, #8]
 8001e0c:	bfa4      	itt	ge
 8001e0e:	f021 0104 	bicge.w	r1, r1, #4
 8001e12:	6021      	strge	r1, [r4, #0]
 8001e14:	b90d      	cbnz	r5, 8001e1a <_printf_i+0x11a>
 8001e16:	2e00      	cmp	r6, #0
 8001e18:	d04d      	beq.n	8001eb6 <_printf_i+0x1b6>
 8001e1a:	4616      	mov	r6, r2
 8001e1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001e20:	fb03 5711 	mls	r7, r3, r1, r5
 8001e24:	5dc7      	ldrb	r7, [r0, r7]
 8001e26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001e2a:	462f      	mov	r7, r5
 8001e2c:	42bb      	cmp	r3, r7
 8001e2e:	460d      	mov	r5, r1
 8001e30:	d9f4      	bls.n	8001e1c <_printf_i+0x11c>
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d10b      	bne.n	8001e4e <_printf_i+0x14e>
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	07df      	lsls	r7, r3, #31
 8001e3a:	d508      	bpl.n	8001e4e <_printf_i+0x14e>
 8001e3c:	6923      	ldr	r3, [r4, #16]
 8001e3e:	6861      	ldr	r1, [r4, #4]
 8001e40:	4299      	cmp	r1, r3
 8001e42:	bfde      	ittt	le
 8001e44:	2330      	movle	r3, #48	; 0x30
 8001e46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001e4a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001e4e:	1b92      	subs	r2, r2, r6
 8001e50:	6122      	str	r2, [r4, #16]
 8001e52:	464b      	mov	r3, r9
 8001e54:	4621      	mov	r1, r4
 8001e56:	4640      	mov	r0, r8
 8001e58:	f8cd a000 	str.w	sl, [sp]
 8001e5c:	aa03      	add	r2, sp, #12
 8001e5e:	f7ff fedf 	bl	8001c20 <_printf_common>
 8001e62:	3001      	adds	r0, #1
 8001e64:	d14c      	bne.n	8001f00 <_printf_i+0x200>
 8001e66:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6a:	b004      	add	sp, #16
 8001e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e70:	4834      	ldr	r0, [pc, #208]	; (8001f44 <_printf_i+0x244>)
 8001e72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001e76:	680e      	ldr	r6, [r1, #0]
 8001e78:	6823      	ldr	r3, [r4, #0]
 8001e7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8001e7e:	061f      	lsls	r7, r3, #24
 8001e80:	600e      	str	r6, [r1, #0]
 8001e82:	d514      	bpl.n	8001eae <_printf_i+0x1ae>
 8001e84:	07d9      	lsls	r1, r3, #31
 8001e86:	bf44      	itt	mi
 8001e88:	f043 0320 	orrmi.w	r3, r3, #32
 8001e8c:	6023      	strmi	r3, [r4, #0]
 8001e8e:	b91d      	cbnz	r5, 8001e98 <_printf_i+0x198>
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	f023 0320 	bic.w	r3, r3, #32
 8001e96:	6023      	str	r3, [r4, #0]
 8001e98:	2310      	movs	r3, #16
 8001e9a:	e7af      	b.n	8001dfc <_printf_i+0xfc>
 8001e9c:	6823      	ldr	r3, [r4, #0]
 8001e9e:	f043 0320 	orr.w	r3, r3, #32
 8001ea2:	6023      	str	r3, [r4, #0]
 8001ea4:	2378      	movs	r3, #120	; 0x78
 8001ea6:	4828      	ldr	r0, [pc, #160]	; (8001f48 <_printf_i+0x248>)
 8001ea8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001eac:	e7e3      	b.n	8001e76 <_printf_i+0x176>
 8001eae:	065e      	lsls	r6, r3, #25
 8001eb0:	bf48      	it	mi
 8001eb2:	b2ad      	uxthmi	r5, r5
 8001eb4:	e7e6      	b.n	8001e84 <_printf_i+0x184>
 8001eb6:	4616      	mov	r6, r2
 8001eb8:	e7bb      	b.n	8001e32 <_printf_i+0x132>
 8001eba:	680b      	ldr	r3, [r1, #0]
 8001ebc:	6826      	ldr	r6, [r4, #0]
 8001ebe:	1d1d      	adds	r5, r3, #4
 8001ec0:	6960      	ldr	r0, [r4, #20]
 8001ec2:	600d      	str	r5, [r1, #0]
 8001ec4:	0635      	lsls	r5, r6, #24
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	d501      	bpl.n	8001ece <_printf_i+0x1ce>
 8001eca:	6018      	str	r0, [r3, #0]
 8001ecc:	e002      	b.n	8001ed4 <_printf_i+0x1d4>
 8001ece:	0671      	lsls	r1, r6, #25
 8001ed0:	d5fb      	bpl.n	8001eca <_printf_i+0x1ca>
 8001ed2:	8018      	strh	r0, [r3, #0]
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	4616      	mov	r6, r2
 8001ed8:	6123      	str	r3, [r4, #16]
 8001eda:	e7ba      	b.n	8001e52 <_printf_i+0x152>
 8001edc:	680b      	ldr	r3, [r1, #0]
 8001ede:	1d1a      	adds	r2, r3, #4
 8001ee0:	600a      	str	r2, [r1, #0]
 8001ee2:	681e      	ldr	r6, [r3, #0]
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4630      	mov	r0, r6
 8001ee8:	6862      	ldr	r2, [r4, #4]
 8001eea:	f000 f82f 	bl	8001f4c <memchr>
 8001eee:	b108      	cbz	r0, 8001ef4 <_printf_i+0x1f4>
 8001ef0:	1b80      	subs	r0, r0, r6
 8001ef2:	6060      	str	r0, [r4, #4]
 8001ef4:	6863      	ldr	r3, [r4, #4]
 8001ef6:	6123      	str	r3, [r4, #16]
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001efe:	e7a8      	b.n	8001e52 <_printf_i+0x152>
 8001f00:	4632      	mov	r2, r6
 8001f02:	4649      	mov	r1, r9
 8001f04:	4640      	mov	r0, r8
 8001f06:	6923      	ldr	r3, [r4, #16]
 8001f08:	47d0      	blx	sl
 8001f0a:	3001      	adds	r0, #1
 8001f0c:	d0ab      	beq.n	8001e66 <_printf_i+0x166>
 8001f0e:	6823      	ldr	r3, [r4, #0]
 8001f10:	079b      	lsls	r3, r3, #30
 8001f12:	d413      	bmi.n	8001f3c <_printf_i+0x23c>
 8001f14:	68e0      	ldr	r0, [r4, #12]
 8001f16:	9b03      	ldr	r3, [sp, #12]
 8001f18:	4298      	cmp	r0, r3
 8001f1a:	bfb8      	it	lt
 8001f1c:	4618      	movlt	r0, r3
 8001f1e:	e7a4      	b.n	8001e6a <_printf_i+0x16a>
 8001f20:	2301      	movs	r3, #1
 8001f22:	4632      	mov	r2, r6
 8001f24:	4649      	mov	r1, r9
 8001f26:	4640      	mov	r0, r8
 8001f28:	47d0      	blx	sl
 8001f2a:	3001      	adds	r0, #1
 8001f2c:	d09b      	beq.n	8001e66 <_printf_i+0x166>
 8001f2e:	3501      	adds	r5, #1
 8001f30:	68e3      	ldr	r3, [r4, #12]
 8001f32:	9903      	ldr	r1, [sp, #12]
 8001f34:	1a5b      	subs	r3, r3, r1
 8001f36:	42ab      	cmp	r3, r5
 8001f38:	dcf2      	bgt.n	8001f20 <_printf_i+0x220>
 8001f3a:	e7eb      	b.n	8001f14 <_printf_i+0x214>
 8001f3c:	2500      	movs	r5, #0
 8001f3e:	f104 0619 	add.w	r6, r4, #25
 8001f42:	e7f5      	b.n	8001f30 <_printf_i+0x230>
 8001f44:	08002225 	.word	0x08002225
 8001f48:	08002236 	.word	0x08002236

08001f4c <memchr>:
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	b510      	push	{r4, lr}
 8001f50:	b2c9      	uxtb	r1, r1
 8001f52:	4402      	add	r2, r0
 8001f54:	4293      	cmp	r3, r2
 8001f56:	4618      	mov	r0, r3
 8001f58:	d101      	bne.n	8001f5e <memchr+0x12>
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	e003      	b.n	8001f66 <memchr+0x1a>
 8001f5e:	7804      	ldrb	r4, [r0, #0]
 8001f60:	3301      	adds	r3, #1
 8001f62:	428c      	cmp	r4, r1
 8001f64:	d1f6      	bne.n	8001f54 <memchr+0x8>
 8001f66:	bd10      	pop	{r4, pc}

08001f68 <memcpy>:
 8001f68:	440a      	add	r2, r1
 8001f6a:	4291      	cmp	r1, r2
 8001f6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001f70:	d100      	bne.n	8001f74 <memcpy+0xc>
 8001f72:	4770      	bx	lr
 8001f74:	b510      	push	{r4, lr}
 8001f76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f7a:	4291      	cmp	r1, r2
 8001f7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001f80:	d1f9      	bne.n	8001f76 <memcpy+0xe>
 8001f82:	bd10      	pop	{r4, pc}

08001f84 <memmove>:
 8001f84:	4288      	cmp	r0, r1
 8001f86:	b510      	push	{r4, lr}
 8001f88:	eb01 0402 	add.w	r4, r1, r2
 8001f8c:	d902      	bls.n	8001f94 <memmove+0x10>
 8001f8e:	4284      	cmp	r4, r0
 8001f90:	4623      	mov	r3, r4
 8001f92:	d807      	bhi.n	8001fa4 <memmove+0x20>
 8001f94:	1e43      	subs	r3, r0, #1
 8001f96:	42a1      	cmp	r1, r4
 8001f98:	d008      	beq.n	8001fac <memmove+0x28>
 8001f9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001f9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001fa2:	e7f8      	b.n	8001f96 <memmove+0x12>
 8001fa4:	4601      	mov	r1, r0
 8001fa6:	4402      	add	r2, r0
 8001fa8:	428a      	cmp	r2, r1
 8001faa:	d100      	bne.n	8001fae <memmove+0x2a>
 8001fac:	bd10      	pop	{r4, pc}
 8001fae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001fb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001fb6:	e7f7      	b.n	8001fa8 <memmove+0x24>

08001fb8 <_free_r>:
 8001fb8:	b538      	push	{r3, r4, r5, lr}
 8001fba:	4605      	mov	r5, r0
 8001fbc:	2900      	cmp	r1, #0
 8001fbe:	d043      	beq.n	8002048 <_free_r+0x90>
 8001fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fc4:	1f0c      	subs	r4, r1, #4
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	bfb8      	it	lt
 8001fca:	18e4      	addlt	r4, r4, r3
 8001fcc:	f000 f8d0 	bl	8002170 <__malloc_lock>
 8001fd0:	4a1e      	ldr	r2, [pc, #120]	; (800204c <_free_r+0x94>)
 8001fd2:	6813      	ldr	r3, [r2, #0]
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	b933      	cbnz	r3, 8001fe6 <_free_r+0x2e>
 8001fd8:	6063      	str	r3, [r4, #4]
 8001fda:	6014      	str	r4, [r2, #0]
 8001fdc:	4628      	mov	r0, r5
 8001fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001fe2:	f000 b8cb 	b.w	800217c <__malloc_unlock>
 8001fe6:	42a3      	cmp	r3, r4
 8001fe8:	d90a      	bls.n	8002000 <_free_r+0x48>
 8001fea:	6821      	ldr	r1, [r4, #0]
 8001fec:	1862      	adds	r2, r4, r1
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	bf01      	itttt	eq
 8001ff2:	681a      	ldreq	r2, [r3, #0]
 8001ff4:	685b      	ldreq	r3, [r3, #4]
 8001ff6:	1852      	addeq	r2, r2, r1
 8001ff8:	6022      	streq	r2, [r4, #0]
 8001ffa:	6063      	str	r3, [r4, #4]
 8001ffc:	6004      	str	r4, [r0, #0]
 8001ffe:	e7ed      	b.n	8001fdc <_free_r+0x24>
 8002000:	461a      	mov	r2, r3
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	b10b      	cbz	r3, 800200a <_free_r+0x52>
 8002006:	42a3      	cmp	r3, r4
 8002008:	d9fa      	bls.n	8002000 <_free_r+0x48>
 800200a:	6811      	ldr	r1, [r2, #0]
 800200c:	1850      	adds	r0, r2, r1
 800200e:	42a0      	cmp	r0, r4
 8002010:	d10b      	bne.n	800202a <_free_r+0x72>
 8002012:	6820      	ldr	r0, [r4, #0]
 8002014:	4401      	add	r1, r0
 8002016:	1850      	adds	r0, r2, r1
 8002018:	4283      	cmp	r3, r0
 800201a:	6011      	str	r1, [r2, #0]
 800201c:	d1de      	bne.n	8001fdc <_free_r+0x24>
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	4401      	add	r1, r0
 8002024:	6011      	str	r1, [r2, #0]
 8002026:	6053      	str	r3, [r2, #4]
 8002028:	e7d8      	b.n	8001fdc <_free_r+0x24>
 800202a:	d902      	bls.n	8002032 <_free_r+0x7a>
 800202c:	230c      	movs	r3, #12
 800202e:	602b      	str	r3, [r5, #0]
 8002030:	e7d4      	b.n	8001fdc <_free_r+0x24>
 8002032:	6820      	ldr	r0, [r4, #0]
 8002034:	1821      	adds	r1, r4, r0
 8002036:	428b      	cmp	r3, r1
 8002038:	bf01      	itttt	eq
 800203a:	6819      	ldreq	r1, [r3, #0]
 800203c:	685b      	ldreq	r3, [r3, #4]
 800203e:	1809      	addeq	r1, r1, r0
 8002040:	6021      	streq	r1, [r4, #0]
 8002042:	6063      	str	r3, [r4, #4]
 8002044:	6054      	str	r4, [r2, #4]
 8002046:	e7c9      	b.n	8001fdc <_free_r+0x24>
 8002048:	bd38      	pop	{r3, r4, r5, pc}
 800204a:	bf00      	nop
 800204c:	20000090 	.word	0x20000090

08002050 <_malloc_r>:
 8002050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002052:	1ccd      	adds	r5, r1, #3
 8002054:	f025 0503 	bic.w	r5, r5, #3
 8002058:	3508      	adds	r5, #8
 800205a:	2d0c      	cmp	r5, #12
 800205c:	bf38      	it	cc
 800205e:	250c      	movcc	r5, #12
 8002060:	2d00      	cmp	r5, #0
 8002062:	4606      	mov	r6, r0
 8002064:	db01      	blt.n	800206a <_malloc_r+0x1a>
 8002066:	42a9      	cmp	r1, r5
 8002068:	d903      	bls.n	8002072 <_malloc_r+0x22>
 800206a:	230c      	movs	r3, #12
 800206c:	6033      	str	r3, [r6, #0]
 800206e:	2000      	movs	r0, #0
 8002070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002072:	f000 f87d 	bl	8002170 <__malloc_lock>
 8002076:	4921      	ldr	r1, [pc, #132]	; (80020fc <_malloc_r+0xac>)
 8002078:	680a      	ldr	r2, [r1, #0]
 800207a:	4614      	mov	r4, r2
 800207c:	b99c      	cbnz	r4, 80020a6 <_malloc_r+0x56>
 800207e:	4f20      	ldr	r7, [pc, #128]	; (8002100 <_malloc_r+0xb0>)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	b923      	cbnz	r3, 800208e <_malloc_r+0x3e>
 8002084:	4621      	mov	r1, r4
 8002086:	4630      	mov	r0, r6
 8002088:	f000 f862 	bl	8002150 <_sbrk_r>
 800208c:	6038      	str	r0, [r7, #0]
 800208e:	4629      	mov	r1, r5
 8002090:	4630      	mov	r0, r6
 8002092:	f000 f85d 	bl	8002150 <_sbrk_r>
 8002096:	1c43      	adds	r3, r0, #1
 8002098:	d123      	bne.n	80020e2 <_malloc_r+0x92>
 800209a:	230c      	movs	r3, #12
 800209c:	4630      	mov	r0, r6
 800209e:	6033      	str	r3, [r6, #0]
 80020a0:	f000 f86c 	bl	800217c <__malloc_unlock>
 80020a4:	e7e3      	b.n	800206e <_malloc_r+0x1e>
 80020a6:	6823      	ldr	r3, [r4, #0]
 80020a8:	1b5b      	subs	r3, r3, r5
 80020aa:	d417      	bmi.n	80020dc <_malloc_r+0x8c>
 80020ac:	2b0b      	cmp	r3, #11
 80020ae:	d903      	bls.n	80020b8 <_malloc_r+0x68>
 80020b0:	6023      	str	r3, [r4, #0]
 80020b2:	441c      	add	r4, r3
 80020b4:	6025      	str	r5, [r4, #0]
 80020b6:	e004      	b.n	80020c2 <_malloc_r+0x72>
 80020b8:	6863      	ldr	r3, [r4, #4]
 80020ba:	42a2      	cmp	r2, r4
 80020bc:	bf0c      	ite	eq
 80020be:	600b      	streq	r3, [r1, #0]
 80020c0:	6053      	strne	r3, [r2, #4]
 80020c2:	4630      	mov	r0, r6
 80020c4:	f000 f85a 	bl	800217c <__malloc_unlock>
 80020c8:	f104 000b 	add.w	r0, r4, #11
 80020cc:	1d23      	adds	r3, r4, #4
 80020ce:	f020 0007 	bic.w	r0, r0, #7
 80020d2:	1ac2      	subs	r2, r0, r3
 80020d4:	d0cc      	beq.n	8002070 <_malloc_r+0x20>
 80020d6:	1a1b      	subs	r3, r3, r0
 80020d8:	50a3      	str	r3, [r4, r2]
 80020da:	e7c9      	b.n	8002070 <_malloc_r+0x20>
 80020dc:	4622      	mov	r2, r4
 80020de:	6864      	ldr	r4, [r4, #4]
 80020e0:	e7cc      	b.n	800207c <_malloc_r+0x2c>
 80020e2:	1cc4      	adds	r4, r0, #3
 80020e4:	f024 0403 	bic.w	r4, r4, #3
 80020e8:	42a0      	cmp	r0, r4
 80020ea:	d0e3      	beq.n	80020b4 <_malloc_r+0x64>
 80020ec:	1a21      	subs	r1, r4, r0
 80020ee:	4630      	mov	r0, r6
 80020f0:	f000 f82e 	bl	8002150 <_sbrk_r>
 80020f4:	3001      	adds	r0, #1
 80020f6:	d1dd      	bne.n	80020b4 <_malloc_r+0x64>
 80020f8:	e7cf      	b.n	800209a <_malloc_r+0x4a>
 80020fa:	bf00      	nop
 80020fc:	20000090 	.word	0x20000090
 8002100:	20000094 	.word	0x20000094

08002104 <_realloc_r>:
 8002104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002106:	4607      	mov	r7, r0
 8002108:	4614      	mov	r4, r2
 800210a:	460e      	mov	r6, r1
 800210c:	b921      	cbnz	r1, 8002118 <_realloc_r+0x14>
 800210e:	4611      	mov	r1, r2
 8002110:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002114:	f7ff bf9c 	b.w	8002050 <_malloc_r>
 8002118:	b922      	cbnz	r2, 8002124 <_realloc_r+0x20>
 800211a:	f7ff ff4d 	bl	8001fb8 <_free_r>
 800211e:	4625      	mov	r5, r4
 8002120:	4628      	mov	r0, r5
 8002122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002124:	f000 f830 	bl	8002188 <_malloc_usable_size_r>
 8002128:	42a0      	cmp	r0, r4
 800212a:	d20f      	bcs.n	800214c <_realloc_r+0x48>
 800212c:	4621      	mov	r1, r4
 800212e:	4638      	mov	r0, r7
 8002130:	f7ff ff8e 	bl	8002050 <_malloc_r>
 8002134:	4605      	mov	r5, r0
 8002136:	2800      	cmp	r0, #0
 8002138:	d0f2      	beq.n	8002120 <_realloc_r+0x1c>
 800213a:	4631      	mov	r1, r6
 800213c:	4622      	mov	r2, r4
 800213e:	f7ff ff13 	bl	8001f68 <memcpy>
 8002142:	4631      	mov	r1, r6
 8002144:	4638      	mov	r0, r7
 8002146:	f7ff ff37 	bl	8001fb8 <_free_r>
 800214a:	e7e9      	b.n	8002120 <_realloc_r+0x1c>
 800214c:	4635      	mov	r5, r6
 800214e:	e7e7      	b.n	8002120 <_realloc_r+0x1c>

08002150 <_sbrk_r>:
 8002150:	b538      	push	{r3, r4, r5, lr}
 8002152:	2300      	movs	r3, #0
 8002154:	4d05      	ldr	r5, [pc, #20]	; (800216c <_sbrk_r+0x1c>)
 8002156:	4604      	mov	r4, r0
 8002158:	4608      	mov	r0, r1
 800215a:	602b      	str	r3, [r5, #0]
 800215c:	f7fe f9ce 	bl	80004fc <_sbrk>
 8002160:	1c43      	adds	r3, r0, #1
 8002162:	d102      	bne.n	800216a <_sbrk_r+0x1a>
 8002164:	682b      	ldr	r3, [r5, #0]
 8002166:	b103      	cbz	r3, 800216a <_sbrk_r+0x1a>
 8002168:	6023      	str	r3, [r4, #0]
 800216a:	bd38      	pop	{r3, r4, r5, pc}
 800216c:	200000dc 	.word	0x200000dc

08002170 <__malloc_lock>:
 8002170:	4801      	ldr	r0, [pc, #4]	; (8002178 <__malloc_lock+0x8>)
 8002172:	f000 b811 	b.w	8002198 <__retarget_lock_acquire_recursive>
 8002176:	bf00      	nop
 8002178:	200000e4 	.word	0x200000e4

0800217c <__malloc_unlock>:
 800217c:	4801      	ldr	r0, [pc, #4]	; (8002184 <__malloc_unlock+0x8>)
 800217e:	f000 b80c 	b.w	800219a <__retarget_lock_release_recursive>
 8002182:	bf00      	nop
 8002184:	200000e4 	.word	0x200000e4

08002188 <_malloc_usable_size_r>:
 8002188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800218c:	1f18      	subs	r0, r3, #4
 800218e:	2b00      	cmp	r3, #0
 8002190:	bfbc      	itt	lt
 8002192:	580b      	ldrlt	r3, [r1, r0]
 8002194:	18c0      	addlt	r0, r0, r3
 8002196:	4770      	bx	lr

08002198 <__retarget_lock_acquire_recursive>:
 8002198:	4770      	bx	lr

0800219a <__retarget_lock_release_recursive>:
 800219a:	4770      	bx	lr

0800219c <_init>:
 800219c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800219e:	bf00      	nop
 80021a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021a2:	bc08      	pop	{r3}
 80021a4:	469e      	mov	lr, r3
 80021a6:	4770      	bx	lr

080021a8 <_fini>:
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021aa:	bf00      	nop
 80021ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ae:	bc08      	pop	{r3}
 80021b0:	469e      	mov	lr, r3
 80021b2:	4770      	bx	lr
